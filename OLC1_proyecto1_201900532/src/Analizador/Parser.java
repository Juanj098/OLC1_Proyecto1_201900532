
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.*;
import java.util.ArrayList;
import Func.Function;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\107\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\005\005\000\002\005\005\000\002" +
    "\006\011\000\002\041\002\000\002\006\010\000\002\024" +
    "\003\000\002\024\003\000\002\021\005\000\002\021\005" +
    "\000\002\021\005\000\002\021\005\000\002\022\010\000" +
    "\002\022\010\000\002\022\010\000\002\022\010\000\002" +
    "\022\010\000\002\022\010\000\002\023\005\000\002\023" +
    "\003\000\002\013\003\000\002\017\010\000\002\017\010" +
    "\000\002\017\010\000\002\017\010\000\002\017\010\000" +
    "\002\017\003\000\002\042\002\000\002\007\012\000\002" +
    "\043\002\000\002\007\012\000\002\025\005\000\002\025" +
    "\003\000\002\010\005\000\002\010\003\000\002\011\003" +
    "\000\002\026\005\000\002\026\003\000\002\014\005\000" +
    "\002\014\003\000\002\012\003\000\002\027\003\000\002" +
    "\027\003\000\002\044\002\000\002\030\012\000\002\045" +
    "\002\000\002\031\014\000\002\033\003\000\002\033\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\036\005\000\002\035\005\000\002\037\005\000\002" +
    "\037\003\000\002\015\005\000\002\015\003\000\002\032" +
    "\005\000\002\032\005\000\002\032\003\000\002\032\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\004\020\005\001\002\000\004\002\277\001" +
    "\002\000\010\017\015\023\010\044\007\001\002\000\012" +
    "\016\ufff8\017\ufff8\023\ufff8\044\ufff8\001\002\000\004\013" +
    "\233\001\002\000\004\011\171\001\002\000\012\016\ufffe" +
    "\017\015\023\010\044\007\001\002\000\012\016\165\017" +
    "\015\023\010\044\007\001\002\000\012\016\uffcf\017\uffcf" +
    "\023\uffcf\044\uffcf\001\002\000\012\016\ufff9\017\ufff9\023" +
    "\ufff9\044\ufff9\001\002\000\004\011\020\001\002\000\012" +
    "\016\uffce\017\uffce\023\uffce\044\uffce\001\002\000\012\016" +
    "\ufffa\017\ufffa\023\ufffa\044\ufffa\001\002\000\006\005\023" +
    "\006\021\001\002\000\004\013\034\001\002\000\012\016" +
    "\ufff7\017\ufff7\023\ufff7\044\ufff7\001\002\000\004\013\024" +
    "\001\002\000\004\014\025\001\002\000\004\007\026\001" +
    "\002\000\006\014\030\022\031\001\002\000\004\004\032" +
    "\001\002\000\004\004\ufff1\001\002\000\004\004\ufff2\001" +
    "\002\000\004\015\033\001\002\000\012\016\ufff5\017\ufff5" +
    "\023\ufff5\044\ufff5\001\002\000\004\014\035\001\002\000" +
    "\004\007\036\001\002\000\034\014\ufff4\021\ufff4\027\ufff4" +
    "\030\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040" +
    "\ufff4\041\ufff4\042\ufff4\043\ufff4\001\002\000\034\014\054" +
    "\021\041\027\042\030\056\033\045\034\053\035\047\036" +
    "\055\037\052\040\040\041\050\042\046\043\057\001\002" +
    "\000\004\031\157\001\002\000\004\004\uffde\001\002\000" +
    "\004\031\150\001\002\000\004\004\146\001\002\000\012" +
    "\016\ufff3\017\ufff3\023\ufff3\044\ufff3\001\002\000\004\031" +
    "\141\001\002\000\004\031\134\001\002\000\004\031\127" +
    "\001\002\000\004\031\122\001\002\000\004\004\120\001" +
    "\002\000\004\031\113\001\002\000\004\031\106\001\002" +
    "\000\004\004\104\001\002\000\004\031\077\001\002\000" +
    "\004\031\072\001\002\000\004\031\060\001\002\000\004" +
    "\025\061\001\002\000\016\021\062\027\042\030\056\033" +
    "\045\034\053\035\047\001\002\000\010\012\uffde\026\uffde" +
    "\032\uffde\001\002\000\006\012\uffe4\026\uffe4\001\002\000" +
    "\006\012\uffe5\026\uffe5\001\002\000\006\012\066\026\067" +
    "\001\002\000\016\021\062\027\042\030\056\033\045\034" +
    "\053\035\047\001\002\000\004\032\070\001\002\000\004" +
    "\004\uffe7\001\002\000\006\012\uffe6\026\uffe6\001\002\000" +
    "\016\021\062\027\042\030\056\033\045\034\053\035\047" +
    "\001\002\000\004\012\074\001\002\000\016\021\062\027" +
    "\042\030\056\033\045\034\053\035\047\001\002\000\004" +
    "\032\076\001\002\000\012\004\uffe2\012\uffe2\026\uffe2\032" +
    "\uffe2\001\002\000\004\025\100\001\002\000\016\021\062" +
    "\027\042\030\056\033\045\034\053\035\047\001\002\000" +
    "\006\012\066\026\102\001\002\000\004\032\103\001\002" +
    "\000\004\004\uffec\001\002\000\004\015\105\001\002\000" +
    "\012\016\uffed\017\uffed\023\uffed\044\uffed\001\002\000\016" +
    "\021\062\027\042\030\056\033\045\034\053\035\047\001" +
    "\002\000\004\012\110\001\002\000\016\021\062\027\042" +
    "\030\056\033\045\034\053\035\047\001\002\000\004\032" +
    "\112\001\002\000\012\004\uffe0\012\uffe0\026\uffe0\032\uffe0" +
    "\001\002\000\004\025\114\001\002\000\016\021\062\027" +
    "\042\030\056\033\045\034\053\035\047\001\002\000\006" +
    "\012\066\026\116\001\002\000\004\032\117\001\002\000" +
    "\004\004\uffeb\001\002\000\004\015\121\001\002\000\012" +
    "\016\uffee\017\uffee\023\uffee\044\uffee\001\002\000\004\025" +
    "\123\001\002\000\016\021\062\027\042\030\056\033\045" +
    "\034\053\035\047\001\002\000\006\012\066\026\125\001" +
    "\002\000\004\032\126\001\002\000\004\004\uffe9\001\002" +
    "\000\016\021\062\027\042\030\056\033\045\034\053\035" +
    "\047\001\002\000\004\012\131\001\002\000\016\021\062" +
    "\027\042\030\056\033\045\034\053\035\047\001\002\000" +
    "\004\032\133\001\002\000\012\004\uffdf\012\uffdf\026\uffdf" +
    "\032\uffdf\001\002\000\004\025\135\001\002\000\016\021" +
    "\062\027\042\030\056\033\045\034\053\035\047\001\002" +
    "\000\006\012\066\026\137\001\002\000\004\032\140\001" +
    "\002\000\004\004\uffe8\001\002\000\016\021\062\027\042" +
    "\030\056\033\045\034\053\035\047\001\002\000\004\012" +
    "\143\001\002\000\016\021\062\027\042\030\056\033\045" +
    "\034\053\035\047\001\002\000\004\032\145\001\002\000" +
    "\012\004\uffe1\012\uffe1\026\uffe1\032\uffe1\001\002\000\004" +
    "\015\147\001\002\000\012\016\uffef\017\uffef\023\uffef\044" +
    "\uffef\001\002\000\016\021\062\027\042\030\056\033\045" +
    "\034\053\035\047\001\002\000\004\012\152\001\002\000" +
    "\016\021\062\027\042\030\056\033\045\034\053\035\047" +
    "\001\002\000\004\032\154\001\002\000\012\004\uffe3\012" +
    "\uffe3\026\uffe3\032\uffe3\001\002\000\004\015\156\001\002" +
    "\000\012\016\ufff0\017\ufff0\023\ufff0\044\ufff0\001\002\000" +
    "\004\025\160\001\002\000\016\021\062\027\042\030\056" +
    "\033\045\034\053\035\047\001\002\000\006\012\066\026" +
    "\162\001\002\000\004\032\163\001\002\000\004\004\uffea" +
    "\001\002\000\012\016\uffff\017\015\023\010\044\007\001" +
    "\002\000\004\002\000\001\002\000\012\016\ufffc\017\ufffc" +
    "\023\ufffc\044\ufffc\001\002\000\012\016\ufffd\017\ufffd\023" +
    "\ufffd\044\ufffd\001\002\000\012\016\ufffb\017\ufffb\023\ufffb" +
    "\044\ufffb\001\002\000\006\005\174\006\172\001\002\000" +
    "\004\013\214\001\002\000\012\016\ufff6\017\ufff6\023\ufff6" +
    "\044\ufff6\001\002\000\004\013\175\001\002\000\004\024" +
    "\176\001\002\000\004\007\uffdd\001\002\000\004\007\200" +
    "\001\002\000\006\024\202\025\201\001\002\000\004\022" +
    "\210\001\002\000\004\004\uffd8\001\002\000\004\004\204" +
    "\001\002\000\004\015\205\001\002\000\012\016\uffdc\017" +
    "\uffdc\023\uffdc\044\uffdc\001\002\000\006\012\211\026\212" +
    "\001\002\000\006\012\uffd6\026\uffd6\001\002\000\006\012" +
    "\uffd5\026\uffd5\001\002\000\004\022\210\001\002\000\004" +
    "\004\uffd9\001\002\000\006\012\uffd7\026\uffd7\001\002\000" +
    "\004\024\215\001\002\000\004\007\uffdb\001\002\000\004" +
    "\007\217\001\002\000\006\024\221\025\220\001\002\000" +
    "\016\021\062\027\042\030\056\033\045\034\053\035\047" +
    "\001\002\000\004\004\uffd3\001\002\000\004\004\223\001" +
    "\002\000\004\015\224\001\002\000\012\016\uffda\017\uffda" +
    "\023\uffda\044\uffda\001\002\000\006\012\uffd0\026\uffd0\001" +
    "\002\000\006\012\uffd1\026\uffd1\001\002\000\006\012\230" +
    "\026\231\001\002\000\016\021\062\027\042\030\056\033" +
    "\045\034\053\035\047\001\002\000\004\004\uffd4\001\002" +
    "\000\006\012\uffd2\026\uffd2\001\002\000\006\045\234\047" +
    "\235\001\002\000\004\046\uffcd\001\002\000\004\046\uffcb" +
    "\001\002\000\004\046\237\001\002\000\006\022\242\024" +
    "\240\001\002\000\004\010\uffc8\001\002\000\004\010\243" +
    "\001\002\000\004\010\uffc9\001\002\000\006\024\244\025" +
    "\245\001\002\000\004\004\uffc7\001\002\000\006\021\253" +
    "\022\256\001\002\000\004\004\251\001\002\000\004\004" +
    "\uffc5\001\002\000\004\004\uffc6\001\002\000\004\015\252" +
    "\001\002\000\012\016\uffca\017\uffca\023\uffca\044\uffca\001" +
    "\002\000\006\012\uffbf\026\uffbf\001\002\000\006\012\262" +
    "\026\263\001\002\000\006\012\257\026\260\001\002\000" +
    "\006\012\uffc1\026\uffc1\001\002\000\004\022\261\001\002" +
    "\000\004\004\uffc4\001\002\000\006\012\uffc2\026\uffc2\001" +
    "\002\000\004\021\264\001\002\000\004\004\uffc3\001\002" +
    "\000\006\012\uffc0\026\uffc0\001\002\000\004\046\266\001" +
    "\002\000\006\014\267\022\271\001\002\000\006\004\uffbb" +
    "\012\uffbb\001\002\000\006\004\273\012\272\001\002\000" +
    "\006\004\uffbc\012\uffbc\001\002\000\006\014\275\022\276" +
    "\001\002\000\004\015\274\001\002\000\012\016\uffcc\017" +
    "\uffcc\023\uffcc\044\uffcc\001\002\000\006\004\uffbd\012\uffbd" +
    "\001\002\000\006\004\uffbe\012\uffbe\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\004\002\003\001\001\000\002\001\001\000" +
    "\020\003\011\004\010\005\016\020\013\027\005\030\012" +
    "\031\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\005\166\020\165\027\167\030\012" +
    "\031\015\001\001\000\016\004\163\005\016\020\013\027" +
    "\005\030\012\031\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\024\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\041\036" +
    "\001\001\000\010\017\042\021\043\022\050\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\063\017\062\023\064\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\013\070\017\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\072" +
    "\001\001\000\002\001\001\000\004\017\074\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\063\017\062\023\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\106\001\001\000\002\001\001\000" +
    "\004\017\110\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\063\017\062\023\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\013\063\017\062\023\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\127\001" +
    "\001\000\002\001\001\000\004\017\131\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\013" +
    "\063\017\062\023\135\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\141\001\001\000" +
    "\002\001\001\000\004\017\143\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\150\001\001\000\002\001\001\000\004\017\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\013\063" +
    "\017\062\023\160\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\166\020\165\027\167" +
    "\030\012\031\015\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\176\001\001\000\002" +
    "\001\001\000\004\025\202\001\001\000\006\010\205\011" +
    "\206\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\212\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\215\001\001\000\002\001\001\000\004\026\221\001\001" +
    "\000\010\012\225\014\226\017\224\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\012\231\017\224\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\044\264\001\001\000" +
    "\004\045\235\001\001\000\002\001\001\000\004\033\240" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\034\245\035\247\036\246\001\001\000\002" +
    "\001\001\000\006\015\253\037\254\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\032\267" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado = "";

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }

    public static ArrayList<Double> listE = new ArrayList<>();
    public static ArrayList<NodoSym> TS = new ArrayList<>();
    public static ArrayList<Double> listD = new ArrayList<>();
    public static ArrayList<String> listS = new ArrayList<>();
    public static  String cadenaExp ="";
    public static  String cadenaArr ="";



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= star EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // star ::= PROGRAM program ENDP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("star",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= program lins 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= lins 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lins ::= lins d 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lins",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lins ::= lins g 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lins",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lins ::= lins pr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lins",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lins ::= d 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lins",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lins ::= g 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lins",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lins ::= pr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lins",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // d ::= VAR DP type_d 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("d",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // d ::= ARRAY DP type_arr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("d",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_d ::= CHAR DPD ID FLIZQ dvc END PYC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        System.out.println(id.toString()+"->"+cad.toString());
        NodoSym Varchar = new NodoSym(id,new ValorString(cad),"char");
        TS.add(Varchar);
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_d",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

        System.out.println(id); listE.clear();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type_d ::= DOUBLE DPD ID FLIZQ NT$0 n 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double v = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        NodoSym Vardouble = new NodoSym(id, new ValorDouble(v),"double");
        TS.add(Vardouble);
        System.out.println(v);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_d",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // dvc ::= CADENA 
            {
              String RESULT =null;
		int cadeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cade = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = cade;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dvc",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // dvc ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Object val = null;
        String type = "char";
        String dato = null;
        for(NodoSym sym:TS){
            if(sym.getNombre().equals(id) && sym.getTipo().equals(type)){
                val = sym.getValor();
                dato = ((ValorString) val).getValor();
                break;
            }
        }
        if (val != null){
            RESULT = dato;
        } else {
            RESULT = null;
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dvc",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // n ::= NUM END PYC 
            {
              Double RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String number = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        Double nu = Double.parseDouble(number);
        RESULT = nu;
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("n",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // n ::= o END PYC 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = n1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("n",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // n ::= e END PYC 
            {
              Double RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = n2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("n",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // n ::= ID END PYC 
            {
              Double RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            Object val = null;
            String type = "double";
            Double dato = null;
            for(NodoSym sym:TS){
                if(sym.getNombre().equals(id) && sym.getTipo().equals(type)){
                    val = sym.getValor();
                    dato = ((ValorDouble) val).getValor();
                    break;
                }
            }
            if (val != null){
                RESULT = dato;
            } else {
                RESULT = null;
            }
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("n",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // e ::= MEDIA PARIZQ CORIZQ nm CORDER PARDER 
            {
              Double RESULT =null;
		
        if (listE.size()>0){
            double prom;
            prom = Function.Media(listE);
            RESULT = prom;
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // e ::= MODA PARIZQ CORIZQ nm CORDER PARDER 
            {
              Double RESULT =null;
		
        if (listE.size()>0){
            double mod;
            mod = Function.Moda(listE);
            RESULT = mod;
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // e ::= MEDIANA PARIZQ CORIZQ nm CORDER PARDER 
            {
              Double RESULT =null;
		
           if (listE.size()>0){
             double mediana;
             mediana = Function.Mediana(listE);
             RESULT = mediana;
           }
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // e ::= VARIANZA PARIZQ CORIZQ nm CORDER PARDER 
            {
              Double RESULT =null;
		
        if (listE.size()>0){
            double varianza;
            varianza = Function.Varianza(listE);
            RESULT = varianza;
        }
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // e ::= MAX PARIZQ CORIZQ nm CORDER PARDER 
            {
              Double RESULT =null;
		
         if (listE.size()>0){
            double max;
            max = Function.Max(listE);
            RESULT = max;
         }
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // e ::= MIN PARIZQ CORIZQ nm CORDER PARDER 
            {
              Double RESULT =null;
		
       if (listE.size()>0){
            double min;
            min = Function.Min(listE);
            RESULT = min;
       }
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // nm ::= nm COMA valorn 
            {
              Double RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nm",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // nm ::= valorn 
            {
              Double RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nm",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // valorn ::= o 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = listE.add(n);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorn",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // o ::= SUM PARIZQ o COMA o PARDER 
            {
              Double RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Double v1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double v2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = v1 + v2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("o",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // o ::= RESTA PARIZQ o COMA o PARDER 
            {
              Double RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Double v1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double v2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = v1 - v2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("o",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // o ::= MULTI PARIZQ o COMA o PARDER 
            {
              Double RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Double v1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double v2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = v1 * v2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("o",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // o ::= DIV PARIZQ o COMA o PARDER 
            {
              Double RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Double v1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double v2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = v1 / v2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("o",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // o ::= MOD PARIZQ o COMA o PARDER 
            {
              Double RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Double v1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double v2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = v1 % v2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("o",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // o ::= NUM 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = Double.valueOf(n);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("o",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$1 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
System.out.println(id);listS.clear();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type_arr ::= CHAR DPD IDARR NT$1 FLIZQ avp END PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> list = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                System.out.println(list);
                NodoSym arrS = new NodoSym(id,new ArrayString(list),"Arreglo_char");
                TS.add(arrS);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_arr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$2 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
System.out.println(id);listD.clear();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type_arr ::= DOUBLE DPD IDARR NT$2 FLIZQ avn END PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Double> list = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                System.out.println(list);
                NodoSym arrD = new NodoSym(id,new ArrayDouble(list),"Arreglo_double");
                TS.add(arrD);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_arr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // avp ::= CORIZQ pals CORDER 
            {
              ArrayList<String> RESULT =null;
		
            ArrayList<String> listSClone = new ArrayList<>();
            listSClone = (ArrayList)listS.clone();
            RESULT = listSClone;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("avp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // avp ::= IDARR 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Object val = null;
            String type = "Arreglo_char";
            ArrayList<String> arr = null;
            for(NodoSym sym:TS){
                if(sym.getNombre().equals(id) && sym.getTipo().equals(type)){
                    val = sym.getValor();
                    arr = ((ArrayString) val).getValor();
                    break;
                }
            }
            if(val != null){
                RESULT = arr;
            }else{
                RESULT = null;
            }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("avp",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // pals ::= pals COMA valorChar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pals",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // pals ::= valorChar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pals",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // valorChar ::= CADENA 
            {
              String RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		listS.add(ca);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorChar",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // avn ::= CORIZQ nums CORDER 
            {
              ArrayList<Double> RESULT =null;
		
            ArrayList<Double> listDClone = new ArrayList<>();
            listDClone = (ArrayList)listD.clone();
            RESULT = listDClone;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("avn",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // avn ::= IDARR 
            {
              ArrayList<Double> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Object val = null;
            String type = "Arreglo_double";
            ArrayList<Double> arr = null;
            for(NodoSym sym:TS){
                if(sym.getNombre().equals(id) && sym.getTipo().equals(type)){
                    val = sym.getValor();
                    arr = ((ArrayDouble) val).getValor();
                    break;
                }
            }
            if(val != null){
                RESULT = arr;
            }else{
                RESULT = null;
            }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("avn",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // nums ::= nums COMA valorNum 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nums",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // nums ::= valorNum 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nums",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // valorNum ::= o 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		listD.add(n1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorNum",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // pr ::= printexp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pr",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // pr ::= printarr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pr",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NT$3 ::= 
            {
              Object RESULT =null;
cadenaExp="";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // printexp ::= CONSO DPD PRINT NT$3 IG exp END PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		System.out.println(cadenaExp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printexp",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // NT$4 ::= 
            {
              Object RESULT =null;
cadenaArr = "<--------------->\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // printarr ::= CONSO DPD COLUM NT$4 IG title FLDER arr END PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		
    cadenaArr = cadenaArr+"<--------------->";
    System.out.println(cadenaArr);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printarr",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // title ::= CADENA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        cadenaArr = cadenaArr+"   "+c+"   "+"\n";
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("title",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // title ::= IDARR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        cadenaArr = cadenaArr+"   "+id+"   ";

        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("title",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // arr ::= IDARR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              Object val = null;
              for(NodoSym sym:TS){
                  if(sym.getNombre().equals(id)){
                      val = sym.getValor();
                      if (val instanceof ArrayString) {
                          ArrayList<String> arr = ((ArrayString) val).getValor();
                          for(int i =0;i>arr.size();i++){
                              cadenaArr = cadenaArr+arr.get(i)+"\n";
                          }
                      } else if (val instanceof ArrayDouble) {
                          ArrayList<Double> arr = ((ArrayDouble) val).getValor();
                          for(int i =0;i>arr.size();i++){
                                cadenaArr = cadenaArr+arr.get(i).toString()+"\n";
                          }
                      break;
                      }
                  }
              }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // arr ::= arrnum 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // arr ::= arrchar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arr",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // arrchar ::= CORIZQ words CORDER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrchar",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // arrnum ::= CORIZQ numbers CORDER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrnum",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // words ::= words COMA CADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("words",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // words ::= CADENA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("words",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // numbers ::= numbers COMA NUM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numbers",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // numbers ::= NUM 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("numbers",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // exp ::= exp COMA CADENA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		cadenaExp = cadenaExp+c+" "+cad;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // exp ::= exp COMA ID 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Object val = null;
            String charr = null;
            for(NodoSym sym:TS){
                if(sym.getNombre().equals(id)){
                    val = sym.getValor();
                    if (val instanceof ValorString) {
                        charr = ((ValorString) val).getValor();
                    } else if (val instanceof ValorDouble) {
                        charr = ((ValorDouble) val).getValor().toString();
                    break;
                    }
                }
            }
            if(charr!=null){
                cadenaExp = cadenaExp+c+" "+charr;
            } else {
                System.out.println("dato no encontrado");
            }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // exp ::= CADENA 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		cadenaExp = cadenaExp+" "+cad;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // exp ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            String charr = null;
            for(NodoSym sym:TS){
                if(sym.getNombre().equals(id)){
                    Object val = sym.getValor();
                    if (val instanceof ValorString) {
                        charr = ((ValorString) val).getValor();
                    }else if (val instanceof ValorDouble) {
                        charr = ((ValorDouble) val).getValor().toString();
                    break;
                    }
                }
            }
            if(charr != null){
                cadenaExp = cadenaExp+" "+charr;
            } else {
                System.out.println("dato no encontrado");
            }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
