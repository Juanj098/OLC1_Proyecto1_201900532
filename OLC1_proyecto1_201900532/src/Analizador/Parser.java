
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.*;
import java.util.ArrayList;
import Func.Function;
import Errores.Errores;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\005\005\000\002\005\005\000\002" +
    "\006\011\000\002\052\002\000\002\006\010\000\002\022" +
    "\003\000\002\022\003\000\002\017\005\000\002\017\005" +
    "\000\002\017\005\000\002\017\005\000\002\020\010\000" +
    "\002\020\010\000\002\020\010\000\002\020\010\000\002" +
    "\020\010\000\002\020\010\000\002\021\005\000\002\021" +
    "\003\000\002\013\003\000\002\015\010\000\002\015\010" +
    "\000\002\015\010\000\002\015\010\000\002\015\010\000" +
    "\002\015\003\000\002\015\003\000\002\053\002\000\002" +
    "\007\012\000\002\054\002\000\002\007\012\000\002\023" +
    "\005\000\002\023\003\000\002\010\005\000\002\010\003" +
    "\000\002\011\003\000\002\024\005\000\002\024\003\000" +
    "\002\014\005\000\002\014\003\000\002\012\003\000\002" +
    "\025\003\000\002\025\003\000\002\055\002\000\002\026" +
    "\012\000\002\056\002\000\002\027\014\000\002\031\003" +
    "\000\002\031\003\000\002\032\003\000\002\032\005\000" +
    "\002\032\005\000\002\033\005\000\002\033\003\000\002" +
    "\034\005\000\002\034\005\000\002\034\003\000\002\034" +
    "\003\000\002\030\005\000\002\030\005\000\002\030\003" +
    "\000\002\030\003\000\002\016\014\000\002\016\014\000" +
    "\002\016\014\000\002\016\014\000\002\035\005\000\002" +
    "\057\002\000\002\041\014\000\002\044\005\000\002\044" +
    "\005\000\002\044\003\000\002\044\003\000\002\060\002" +
    "\000\002\042\014\000\002\045\005\000\002\045\005\000" +
    "\002\045\003\000\002\045\003\000\002\043\011\000\002" +
    "\036\007\000\002\061\002\000\002\046\014\000\002\062" +
    "\002\000\002\047\014\000\002\050\011\000\002\051\011" +
    "\000\002\037\007\000\002\040\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u013c\000\004\020\005\001\002\000\004\002\u013e\001" +
    "\002\000\020\017\017\023\011\044\010\050\015\051\022" +
    "\052\023\053\007\001\002\000\022\016\ufff8\017\ufff8\023" +
    "\ufff8\044\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\001\002" +
    "\000\004\031\u0133\001\002\000\004\013\u010f\001\002\000" +
    "\004\011\355\001\002\000\022\016\ufffe\017\017\023\011" +
    "\044\010\050\015\051\022\052\023\053\007\001\002\000" +
    "\022\016\351\017\017\023\011\044\010\050\015\051\022" +
    "\052\023\053\007\001\002\000\022\016\uffce\017\uffce\023" +
    "\uffce\044\uffce\050\uffce\051\uffce\052\uffce\053\uffce\001\002" +
    "\000\004\031\310\001\002\000\022\016\ufff9\017\ufff9\023" +
    "\ufff9\044\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9\001\002" +
    "\000\004\011\143\001\002\000\022\016\uffcd\017\uffcd\023" +
    "\uffcd\044\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\001\002" +
    "\000\022\016\ufffa\017\ufffa\023\ufffa\044\ufffa\050\ufffa\051" +
    "\ufffa\052\ufffa\053\ufffa\001\002\000\004\031\125\001\002" +
    "\000\004\031\024\001\002\000\004\057\027\001\002\000" +
    "\004\062\045\001\002\000\004\054\036\001\002\000\004" +
    "\013\030\001\002\000\004\005\031\001\002\000\004\046" +
    "\032\001\002\000\004\022\033\001\002\000\004\004\034" +
    "\001\002\000\004\015\035\001\002\000\010\054\uffa8\056" +
    "\uffa8\062\uffa8\001\002\000\004\052\037\001\002\000\004" +
    "\004\040\001\002\000\004\015\041\001\002\000\004\032" +
    "\042\001\002\000\004\004\043\001\002\000\004\015\044" +
    "\001\002\000\022\016\uffb7\017\uffb7\023\uffb7\044\uffb7\050" +
    "\uffb7\051\uffb7\052\uffb7\053\uffb7\001\002\000\004\013\107" +
    "\001\002\000\004\063\047\001\002\000\004\013\071\001" +
    "\002\000\004\060\052\001\002\000\004\061\062\001\002" +
    "\000\004\013\053\001\002\000\004\005\054\001\002\000" +
    "\004\046\055\001\002\000\004\022\056\001\002\000\004" +
    "\004\057\001\002\000\004\015\060\001\002\000\004\061" +
    "\uffa2\001\002\000\004\054\uffa0\001\002\000\004\013\063" +
    "\001\002\000\004\005\064\001\002\000\004\046\065\001" +
    "\002\000\004\022\066\001\002\000\004\004\067\001\002" +
    "\000\004\015\070\001\002\000\004\054\uffa1\001\002\000" +
    "\004\006\072\001\002\000\004\046\073\001\002\000\004" +
    "\025\uffa4\001\002\000\004\025\075\001\002\000\006\014" +
    "\076\021\077\001\002\000\006\012\uffa9\026\uffa9\001\002" +
    "\000\006\012\uffaa\026\uffaa\001\002\000\006\012\101\026" +
    "\102\001\002\000\006\014\106\021\105\001\002\000\004" +
    "\004\103\001\002\000\004\015\104\001\002\000\004\060" +
    "\uffa3\001\002\000\006\012\uffac\026\uffac\001\002\000\006" +
    "\012\uffab\026\uffab\001\002\000\004\005\110\001\002\000" +
    "\004\046\uffa6\001\002\000\004\046\112\001\002\000\004" +
    "\025\113\001\002\000\006\014\114\022\116\001\002\000" +
    "\006\012\uffaf\026\uffaf\001\002\000\006\012\117\026\120" +
    "\001\002\000\006\012\uffb0\026\uffb0\001\002\000\006\014" +
    "\123\022\124\001\002\000\004\004\121\001\002\000\004" +
    "\015\122\001\002\000\004\063\uffa5\001\002\000\006\012" +
    "\uffb1\026\uffb1\001\002\000\006\012\uffb2\026\uffb2\001\002" +
    "\000\004\057\027\001\002\000\004\054\134\001\002\000" +
    "\004\062\045\001\002\000\004\063\047\001\002\000\004" +
    "\060\052\001\002\000\004\061\062\001\002\000\004\054" +
    "\uffa7\001\002\000\004\051\135\001\002\000\004\004\136" +
    "\001\002\000\004\015\137\001\002\000\004\032\140\001" +
    "\002\000\004\004\141\001\002\000\004\015\142\001\002" +
    "\000\022\016\uffb8\017\uffb8\023\uffb8\044\uffb8\050\uffb8\051" +
    "\uffb8\052\uffb8\053\uffb8\001\002\000\006\005\146\006\144" +
    "\001\002\000\004\013\157\001\002\000\022\016\ufff7\017" +
    "\ufff7\023\ufff7\044\ufff7\050\ufff7\051\ufff7\052\ufff7\053\ufff7" +
    "\001\002\000\004\013\147\001\002\000\004\014\150\001" +
    "\002\000\004\007\151\001\002\000\006\014\153\022\154" +
    "\001\002\000\004\004\155\001\002\000\004\004\ufff1\001" +
    "\002\000\004\004\ufff2\001\002\000\004\015\156\001\002" +
    "\000\022\016\ufff5\017\ufff5\023\ufff5\044\ufff5\050\ufff5\051" +
    "\ufff5\052\ufff5\053\ufff5\001\002\000\004\014\160\001\002" +
    "\000\004\007\161\001\002\000\034\014\ufff4\021\ufff4\027" +
    "\ufff4\030\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4" +
    "\040\ufff4\041\ufff4\042\ufff4\043\ufff4\001\002\000\034\014" +
    "\177\021\164\027\165\030\200\033\170\034\176\035\171" +
    "\036\201\037\174\040\163\041\173\042\172\043\202\001" +
    "\002\000\004\031\303\001\002\000\004\004\301\001\002" +
    "\000\004\031\274\001\002\000\004\004\272\001\002\000" +
    "\022\016\ufff3\017\ufff3\023\ufff3\044\ufff3\050\ufff3\051\ufff3" +
    "\052\ufff3\053\ufff3\001\002\000\004\031\265\001\002\000" +
    "\004\031\260\001\002\000\004\031\253\001\002\000\004" +
    "\031\246\001\002\000\004\031\241\001\002\000\004\004" +
    "\237\001\002\000\004\031\232\001\002\000\004\004\230" +
    "\001\002\000\004\031\223\001\002\000\004\031\216\001" +
    "\002\000\004\031\203\001\002\000\004\025\204\001\002" +
    "\000\020\014\210\021\205\027\165\030\200\033\170\034" +
    "\176\035\171\001\002\000\010\012\uffde\026\uffde\032\uffde" +
    "\001\002\000\006\012\uffe4\026\uffe4\001\002\000\006\012" +
    "\uffe5\026\uffe5\001\002\000\010\012\uffdd\026\uffdd\032\uffdd" +
    "\001\002\000\006\012\212\026\213\001\002\000\020\014" +
    "\210\021\205\027\165\030\200\033\170\034\176\035\171" +
    "\001\002\000\004\032\214\001\002\000\004\004\uffe7\001" +
    "\002\000\006\012\uffe6\026\uffe6\001\002\000\004\025\217" +
    "\001\002\000\020\014\210\021\205\027\165\030\200\033" +
    "\170\034\176\035\171\001\002\000\006\012\212\026\221" +
    "\001\002\000\004\032\222\001\002\000\004\004\uffec\001" +
    "\002\000\020\014\210\021\205\027\165\030\200\033\170" +
    "\034\176\035\171\001\002\000\004\012\225\001\002\000" +
    "\020\014\210\021\205\027\165\030\200\033\170\034\176" +
    "\035\171\001\002\000\004\032\227\001\002\000\012\004" +
    "\uffe2\012\uffe2\026\uffe2\032\uffe2\001\002\000\004\015\231" +
    "\001\002\000\022\016\uffed\017\uffed\023\uffed\044\uffed\050" +
    "\uffed\051\uffed\052\uffed\053\uffed\001\002\000\020\014\210" +
    "\021\205\027\165\030\200\033\170\034\176\035\171\001" +
    "\002\000\004\012\234\001\002\000\020\014\210\021\205" +
    "\027\165\030\200\033\170\034\176\035\171\001\002\000" +
    "\004\032\236\001\002\000\012\004\uffe0\012\uffe0\026\uffe0" +
    "\032\uffe0\001\002\000\004\015\240\001\002\000\022\016" +
    "\uffee\017\uffee\023\uffee\044\uffee\050\uffee\051\uffee\052\uffee" +
    "\053\uffee\001\002\000\004\025\242\001\002\000\020\014" +
    "\210\021\205\027\165\030\200\033\170\034\176\035\171" +
    "\001\002\000\006\012\212\026\244\001\002\000\004\032" +
    "\245\001\002\000\004\004\uffeb\001\002\000\004\025\247" +
    "\001\002\000\020\014\210\021\205\027\165\030\200\033" +
    "\170\034\176\035\171\001\002\000\006\012\212\026\251" +
    "\001\002\000\004\032\252\001\002\000\004\004\uffe9\001" +
    "\002\000\004\025\254\001\002\000\020\014\210\021\205" +
    "\027\165\030\200\033\170\034\176\035\171\001\002\000" +
    "\006\012\212\026\256\001\002\000\004\032\257\001\002" +
    "\000\004\004\uffe8\001\002\000\020\014\210\021\205\027" +
    "\165\030\200\033\170\034\176\035\171\001\002\000\004" +
    "\012\262\001\002\000\020\014\210\021\205\027\165\030" +
    "\200\033\170\034\176\035\171\001\002\000\004\032\264" +
    "\001\002\000\012\004\uffdf\012\uffdf\026\uffdf\032\uffdf\001" +
    "\002\000\020\014\210\021\205\027\165\030\200\033\170" +
    "\034\176\035\171\001\002\000\004\012\267\001\002\000" +
    "\020\014\210\021\205\027\165\030\200\033\170\034\176" +
    "\035\171\001\002\000\004\032\271\001\002\000\012\004" +
    "\uffe1\012\uffe1\026\uffe1\032\uffe1\001\002\000\004\015\273" +
    "\001\002\000\022\016\uffef\017\uffef\023\uffef\044\uffef\050" +
    "\uffef\051\uffef\052\uffef\053\uffef\001\002\000\020\014\210" +
    "\021\205\027\165\030\200\033\170\034\176\035\171\001" +
    "\002\000\004\012\276\001\002\000\020\014\210\021\205" +
    "\027\165\030\200\033\170\034\176\035\171\001\002\000" +
    "\004\032\300\001\002\000\012\004\uffe3\012\uffe3\026\uffe3" +
    "\032\uffe3\001\002\000\004\015\302\001\002\000\022\016" +
    "\ufff0\017\ufff0\023\ufff0\044\ufff0\050\ufff0\051\ufff0\052\ufff0" +
    "\053\ufff0\001\002\000\004\025\304\001\002\000\020\014" +
    "\210\021\205\027\165\030\200\033\170\034\176\035\171" +
    "\001\002\000\006\012\212\026\306\001\002\000\004\032" +
    "\307\001\002\000\004\004\uffea\001\002\000\004\055\313" +
    "\001\002\000\004\054\341\001\002\000\004\056\325\001" +
    "\002\000\004\013\314\001\002\000\004\005\315\001\002" +
    "\000\004\046\316\001\002\000\004\025\uffb4\001\002\000" +
    "\004\025\320\001\002\000\006\014\114\022\116\001\002" +
    "\000\006\012\117\026\322\001\002\000\004\004\323\001" +
    "\002\000\004\015\324\001\002\000\004\056\uffb3\001\002" +
    "\000\004\013\330\001\002\000\004\057\027\001\002\000" +
    "\004\054\uffb5\001\002\000\004\006\331\001\002\000\004" +
    "\046\332\001\002\000\004\025\uffae\001\002\000\004\025" +
    "\334\001\002\000\006\014\076\021\077\001\002\000\006" +
    "\012\101\026\336\001\002\000\004\004\337\001\002\000" +
    "\004\015\340\001\002\000\006\054\uffad\057\uffad\001\002" +
    "\000\004\050\342\001\002\000\004\004\343\001\002\000" +
    "\004\015\344\001\002\000\004\032\345\001\002\000\004" +
    "\004\346\001\002\000\004\015\347\001\002\000\022\016" +
    "\uffb9\017\uffb9\023\uffb9\044\uffb9\050\uffb9\051\uffb9\052\uffb9" +
    "\053\uffb9\001\002\000\022\016\uffff\017\017\023\011\044" +
    "\010\050\015\051\022\052\023\053\007\001\002\000\004" +
    "\002\000\001\002\000\022\016\ufffb\017\ufffb\023\ufffb\044" +
    "\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\001\002\000\022" +
    "\016\ufffc\017\ufffc\023\ufffc\044\ufffc\050\ufffc\051\ufffc\052" +
    "\ufffc\053\ufffc\001\002\000\022\016\ufffd\017\ufffd\023\ufffd" +
    "\044\ufffd\050\ufffd\051\ufffd\052\ufffd\053\ufffd\001\002\000" +
    "\006\005\360\006\356\001\002\000\004\013\u0100\001\002" +
    "\000\022\016\ufff6\017\ufff6\023\ufff6\044\ufff6\050\ufff6\051" +
    "\ufff6\052\ufff6\053\ufff6\001\002\000\004\013\361\001\002" +
    "\000\004\024\362\001\002\000\004\007\uffdc\001\002\000" +
    "\004\007\364\001\002\000\006\024\365\025\366\001\002" +
    "\000\004\004\uffd7\001\002\000\004\022\374\001\002\000" +
    "\004\004\370\001\002\000\004\015\371\001\002\000\022" +
    "\016\uffdb\017\uffdb\023\uffdb\044\uffdb\050\uffdb\051\uffdb\052" +
    "\uffdb\053\uffdb\001\002\000\006\012\375\026\376\001\002" +
    "\000\006\012\uffd5\026\uffd5\001\002\000\006\012\uffd4\026" +
    "\uffd4\001\002\000\004\022\374\001\002\000\004\004\uffd8" +
    "\001\002\000\006\012\uffd6\026\uffd6\001\002\000\004\024" +
    "\u0101\001\002\000\004\007\uffda\001\002\000\004\007\u0103" +
    "\001\002\000\006\024\u0104\025\u0105\001\002\000\004\004" +
    "\uffd2\001\002\000\020\014\210\021\205\027\165\030\200" +
    "\033\170\034\176\035\171\001\002\000\004\004\u0107\001" +
    "\002\000\004\015\u0108\001\002\000\022\016\uffd9\017\uffd9" +
    "\023\uffd9\044\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\001" +
    "\002\000\006\012\uffcf\026\uffcf\001\002\000\006\012\uffd0" +
    "\026\uffd0\001\002\000\006\012\u010c\026\u010d\001\002\000" +
    "\020\014\210\021\205\027\165\030\200\033\170\034\176" +
    "\035\171\001\002\000\004\004\uffd3\001\002\000\006\012" +
    "\uffd1\026\uffd1\001\002\000\006\045\u0110\047\u0111\001\002" +
    "\000\004\046\uffcc\001\002\000\004\046\uffca\001\002\000" +
    "\004\046\u0113\001\002\000\006\022\u0116\024\u0114\001\002" +
    "\000\004\010\uffc7\001\002\000\004\010\u0117\001\002\000" +
    "\004\010\uffc8\001\002\000\006\024\u0119\025\u011a\001\002" +
    "\000\004\004\u0127\001\002\000\004\004\uffc6\001\002\000" +
    "\010\014\u011b\021\u011c\022\u011f\001\002\000\006\012\uffbe" +
    "\026\uffbe\001\002\000\006\012\uffc2\026\uffc2\001\002\000" +
    "\006\012\u0123\026\u0124\001\002\000\006\012\u0120\026\u0121" +
    "\001\002\000\006\012\uffbf\026\uffbf\001\002\000\004\021" +
    "\u0122\001\002\000\004\004\uffc5\001\002\000\006\012\uffc3" +
    "\026\uffc3\001\002\000\006\014\u0125\022\u0126\001\002\000" +
    "\004\004\uffc4\001\002\000\006\012\uffc0\026\uffc0\001\002" +
    "\000\006\012\uffc1\026\uffc1\001\002\000\004\015\u0128\001" +
    "\002\000\022\016\uffc9\017\uffc9\023\uffc9\044\uffc9\050\uffc9" +
    "\051\uffc9\052\uffc9\053\uffc9\001\002\000\004\046\u012a\001" +
    "\002\000\006\014\u012b\022\u012d\001\002\000\006\004\uffba" +
    "\012\uffba\001\002\000\006\004\u012f\012\u012e\001\002\000" +
    "\006\004\uffbb\012\uffbb\001\002\000\006\014\u0131\022\u0132" +
    "\001\002\000\004\015\u0130\001\002\000\022\016\uffcb\017" +
    "\uffcb\023\uffcb\044\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb" +
    "\001\002\000\006\004\uffbc\012\uffbc\001\002\000\006\004" +
    "\uffbd\012\uffbd\001\002\000\004\057\027\001\002\000\004" +
    "\056\325\001\002\000\004\054\u0136\001\002\000\004\053" +
    "\u0137\001\002\000\004\004\u0138\001\002\000\004\015\u0139" +
    "\001\002\000\004\032\u013a\001\002\000\004\004\u013b\001" +
    "\002\000\004\015\u013c\001\002\000\022\016\uffb6\017\uffb6" +
    "\023\uffb6\044\uffb6\050\uffb6\051\uffb6\052\uffb6\053\uffb6\001" +
    "\002\000\004\054\uff9f\001\002\000\004\002\001\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u013c\000\004\002\003\001\001\000\002\001\001\000" +
    "\020\003\012\004\011\005\020\016\015\025\005\026\013" +
    "\027\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\005\353\016\352" +
    "\025\351\026\013\027\017\001\001\000\016\004\347\005" +
    "\020\016\015\025\005\026\013\027\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\037\025\043\024\001\001\000" +
    "\004\046\045\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\047\047\001\001\000\002\001" +
    "\001\000\004\050\050\001\001\000\004\051\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\062\073\001\001\000\002\001\001" +
    "\000\004\045\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\061\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\036\125\043\126\001\001\000\002\001\001\000\004\046" +
    "\127\001\001\000\004\047\130\001\001\000\004\050\131" +
    "\001\001\000\004\051\132\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\151\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\052\161" +
    "\001\001\000\010\015\165\017\166\020\174\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\013\206\015\205\021\210\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\214\015\205\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\206\015\205\021\217\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\223\001\001\000\002\001\001\000\004\015" +
    "\225\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\232\001\001\000" +
    "\002\001\001\000\004\015\234\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\206\015\205\021\242\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\206\015\205\021\247\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\206\015\205\021\254\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\260\001\001\000\002\001\001\000\004\015\262" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\265\001\001\000\002\001\001\000\004\015\267\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\015\274\001\001\000\002\001\001" +
    "\000\004\015\276\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\013\206\015\205\021\304\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\035\310" +
    "\041\311\001\001\000\002\001\001\000\004\042\325\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\057\316\001\001\000\002\001\001\000\004\044" +
    "\320\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\326\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\060\332\001\001\000\002\001\001\000" +
    "\004\045\334\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\005" +
    "\353\016\352\025\351\026\013\027\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\356\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\053" +
    "\362\001\001\000\002\001\001\000\004\023\366\001\001" +
    "\000\002\001\001\000\006\010\371\011\372\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\011" +
    "\376\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\054\u0101\001\001\000\002\001\001\000" +
    "\004\024\u0105\001\001\000\002\001\001\000\010\012\u0109" +
    "\014\u010a\015\u0108\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\012\u010d\015\u0108\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\055\u0128\001\001\000\004\056\u0111\001\001\000\002\001" +
    "\001\000\004\031\u0114\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\032\u0117\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\033\u011d\034\u011c" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\030" +
    "\u012b\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\040\u0134" +
    "\043\u0133\001\001\000\004\042\u013c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado = "";

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
            Errores errorS = new Errores(s.right,s.left,s.value.toString(),"Sintactico");
            Function.list_err.add(errorS);
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }

    public static ArrayList<Double> listE = new ArrayList<>();
    public static ArrayList<NodoSym> TS = new ArrayList<>();
    public static ArrayList<Double> listD = new ArrayList<>();
    public static ArrayList<String> listS = new ArrayList<>();
    public static ArrayList<String> listSG = new ArrayList<>();
    public static ArrayList<Double> listDG = new ArrayList<>();
    public static ArrayList<String> GRAPHS = new ArrayList<>();
    public static  String cadenaExp ="";
    public static  String cadenaArr ="";
    public static ArrayList<RESP> resultad = new ArrayList<>();



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {




  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= star EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // star ::= PROGRAM program ENDP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("star",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= program lins 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= lins 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lins ::= lins d 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lins",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lins ::= lins g 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lins",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lins ::= lins pr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lins",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lins ::= d 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lins",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lins ::= g 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lins",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lins ::= pr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lins",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // d ::= VAR DP type_d 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("d",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // d ::= ARRAY DP type_arr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("d",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_d ::= CHAR DPD ID FLIZQ dvc END PYC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        System.out.println(id.toString()+"->"+cad.toString());
        NodoSym Varchar = new NodoSym(id,new ValorString(cad),"char");
        TS.add(Varchar);
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_d",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

        System.out.println(id); listE.clear();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type_d ::= DOUBLE DPD ID FLIZQ NT$0 n 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double v = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        NodoSym Vardouble = new NodoSym(id, new ValorDouble(v),"double");
        TS.add(Vardouble);
        System.out.println(v);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_d",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // dvc ::= CADENA 
            {
              String RESULT =null;
		int cadeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cade = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = cade;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dvc",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // dvc ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Object val = null;
        String type = "char";
        String dato = null;
        for(NodoSym sym:TS){
            if(sym.getNombre().equals(id) && sym.getTipo().equals(type)){
                val = sym.getValor();
                dato = ((ValorString) val).getValor();
                break;
            }
        }
        if (val != null){
            RESULT = dato;
        } else {
            RESULT = null;
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dvc",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // n ::= NUM END PYC 
            {
              Double RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String number = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        Double nu = Double.parseDouble(number);
        RESULT = nu;
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("n",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // n ::= o END PYC 
            {
              Double RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = n1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("n",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // n ::= e END PYC 
            {
              Double RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double n2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = n2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("n",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // n ::= ID END PYC 
            {
              Double RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            Object val = null;
            String type = "double";
            Double dato = null;
            for(NodoSym sym:TS){
                if(sym.getNombre().equals(id) && sym.getTipo().equals(type)){
                    val = sym.getValor();
                    dato = ((ValorDouble) val).getValor();
                    break;
                }
            }
            if (val != null){
                RESULT = dato;
            } else {
                RESULT = null;
            }
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("n",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // e ::= MEDIA PARIZQ CORIZQ nm CORDER PARDER 
            {
              Double RESULT =null;
		
        if (listE.size()>0){
            double prom;
            prom = Function.Media(listE);
            RESULT = prom;
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // e ::= MODA PARIZQ CORIZQ nm CORDER PARDER 
            {
              Double RESULT =null;
		
        if (listE.size()>0){
            double mod;
            mod = Function.Moda(listE);
            RESULT = mod;
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // e ::= MEDIANA PARIZQ CORIZQ nm CORDER PARDER 
            {
              Double RESULT =null;
		
           if (listE.size()>0){
             double mediana;
             mediana = Function.Mediana(listE);
             RESULT = mediana;
           }
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // e ::= VARIANZA PARIZQ CORIZQ nm CORDER PARDER 
            {
              Double RESULT =null;
		
        if (listE.size()>0){
            double varianza;
            varianza = Function.Varianza(listE);
            RESULT = varianza;
        }
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // e ::= MAX PARIZQ CORIZQ nm CORDER PARDER 
            {
              Double RESULT =null;
		
         if (listE.size()>0){
            double max;
            max = Function.Max(listE);
            RESULT = max;
         }
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // e ::= MIN PARIZQ CORIZQ nm CORDER PARDER 
            {
              Double RESULT =null;
		
       if (listE.size()>0){
            double min;
            min = Function.Min(listE);
            RESULT = min;
       }
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // nm ::= nm COMA valorn 
            {
              Double RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nm",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // nm ::= valorn 
            {
              Double RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nm",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // valorn ::= o 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
    RESULT = listE.add(n);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorn",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // o ::= SUM PARIZQ o COMA o PARDER 
            {
              Double RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Double v1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double v2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = v1 + v2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("o",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // o ::= RESTA PARIZQ o COMA o PARDER 
            {
              Double RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Double v1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double v2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = v1 - v2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("o",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // o ::= MULTI PARIZQ o COMA o PARDER 
            {
              Double RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Double v1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double v2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = v1 * v2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("o",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // o ::= DIV PARIZQ o COMA o PARDER 
            {
              Double RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Double v1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double v2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = v1 / v2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("o",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // o ::= MOD PARIZQ o COMA o PARDER 
            {
              Double RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Double v1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double v2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = v1 % v2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("o",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // o ::= NUM 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = Double.valueOf(n);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("o",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // o ::= ID 
            {
              Double RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
       Double num = null;
       String type = "double";
       for (NodoSym sym : TS) {
           if (sym.getNombre().equals(id) && sym.getTipo().equals(type)) {
               Object val = sym.getValor();
               if (val instanceof ValorDouble) {
                   num = ((ValorDouble) val).getValor();
                   break;
               }
           }
       }
       if (num != null) {
           RESULT = num;
       } else {
           System.out.println("Dato no encontrado");
       }

    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("o",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NT$1 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
System.out.println(id);listS.clear();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type_arr ::= CHAR DPD IDARR NT$1 FLIZQ avp END PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> list = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                System.out.println(list);
                NodoSym arrS = new NodoSym(id,new ArrayString(list),"Arreglo_char");
                TS.add(arrS);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_arr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$2 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
System.out.println(id);listD.clear();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // type_arr ::= DOUBLE DPD IDARR NT$2 FLIZQ avn END PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Double> list = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                System.out.println(list);
                NodoSym arrD = new NodoSym(id,new ArrayDouble(list),"Arreglo_double");
                TS.add(arrD);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_arr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // avp ::= CORIZQ pals CORDER 
            {
              ArrayList<String> RESULT =null;
		
            ArrayList<String> listSClone = new ArrayList<>();
            listSClone = (ArrayList)listS.clone();
            RESULT = listSClone;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("avp",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // avp ::= IDARR 
            {
              ArrayList<String> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Object val = null;
            String type = "Arreglo_char";
            ArrayList<String> arr = null;
            for(NodoSym sym:TS){
                if(sym.getNombre().equals(id) && sym.getTipo().equals(type)){
                    val = sym.getValor();
                    arr = ((ArrayString) val).getValor();
                    break;
                }
            }
            if(val != null){
                RESULT = arr;
            }else{
                RESULT = null;
            }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("avp",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // pals ::= pals COMA valorChar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pals",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // pals ::= valorChar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pals",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // valorChar ::= CADENA 
            {
              String RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		listS.add(ca);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorChar",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // avn ::= CORIZQ nums CORDER 
            {
              ArrayList<Double> RESULT =null;
		
            ArrayList<Double> listDClone = new ArrayList<>();
            listDClone = (ArrayList)listD.clone();
            RESULT = listDClone;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("avn",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // avn ::= IDARR 
            {
              ArrayList<Double> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Object val = null;
            String type = "Arreglo_double";
            ArrayList<Double> arr = null;
            for(NodoSym sym:TS){
                if(sym.getNombre().equals(id) && sym.getTipo().equals(type)){
                    val = sym.getValor();
                    arr = ((ArrayDouble) val).getValor();
                    break;
                }
            }
            if(val != null){
                RESULT = arr;
            }else{
                RESULT = null;
            }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("avn",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // nums ::= nums COMA valorNum 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nums",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // nums ::= valorNum 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nums",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // valorNum ::= o 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		listD.add(n1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorNum",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // pr ::= printexp 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // pr ::= printarr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pr",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // NT$3 ::= 
            {
              Object RESULT =null;
cadenaExp="";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$3",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // printexp ::= CONSO DPD PRINT NT$3 IG exp END PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		
    RESP r = new RESP(new respString(cadenaExp));
    resultad.add(r);
    System.out.println(cadenaExp);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printexp",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$4 ::= 
            {
              Object RESULT =null;
cadenaArr = "<--------------->\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$4",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // printarr ::= CONSO DPD COLUM NT$4 IG title FLDER arr END PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		
    cadenaArr = cadenaArr+"<--------------->";
    RESP r = new RESP(new respString(cadenaArr));
    resultad.add(r);
    System.out.println(cadenaArr);

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("printarr",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // title ::= CADENA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        cadenaArr = cadenaArr+"   "+c+"   "+"\n";
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("title",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // title ::= IDARR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        cadenaArr = cadenaArr+"   "+id+"   "+"\n";

        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("title",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // arr ::= IDARR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
              Object val = null;
              for(NodoSym sym:TS){
                  if(sym.getNombre().equals(id)){
                      val = sym.getValor();
                      if (val instanceof ArrayString) {
                          ArrayList<String> arr = ((ArrayString) val).getValor();
                          for(int i =0;i<arr.size();i++){
                              cadenaArr = cadenaArr+arr.get(i)+"\n";
                          }
                      } else if (val instanceof ArrayDouble) {
                          ArrayList<Double> arr = ((ArrayDouble) val).getValor();
                          for(int i =0;i<arr.size();i++){
                                cadenaArr = cadenaArr+arr.get(i).toString()+"\n";
                          }
                      }
                      break;
                  }
              }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // arr ::= CORIZQ arrnum CORDER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // arr ::= CORIZQ arrchar CORDER 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arr",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // arrnum ::= arrnum COMA NUM 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		cadenaArr = cadenaArr+n+"\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrnum",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // arrnum ::= NUM 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		cadenaArr = cadenaArr+n+"\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrnum",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // arrchar ::= arrchar COMA CADENA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		cadenaArr = cadenaArr+c+"\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrchar",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // arrchar ::= arrchar COMA ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Object val = null;
            String charr = null;
            for(NodoSym sym:TS){
                if(sym.getNombre().equals(id)){
                    val = sym.getValor();
                    if (val instanceof ValorString) {
                        charr = ((ValorString) val).getValor();
                    } else if (val instanceof ValorDouble) {
                        charr = ((ValorDouble) val).getValor().toString();
                        break;
                    }
                }
            }
            if(charr!=null){
                cadenaArr = cadenaArr+charr+"\n";
            } else {
                System.out.println("dato no encontrado");
            }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrchar",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // arrchar ::= CADENA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		cadenaArr = cadenaArr+c+"\n";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrchar",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // arrchar ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Object val = null;
            String charr = null;
            for(NodoSym sym:TS){
                if(sym.getNombre().equals(id)){
                    val = sym.getValor();
                    if (val instanceof ValorString) {
                        charr = ((ValorString) val).getValor();
                    } else if (val instanceof ValorDouble) {
                        charr = ((ValorDouble) val).getValor().toString();
                        break;
                    }
                }
            }
            if(charr!=null){
                cadenaArr = cadenaArr+charr+"\n";
            } else {
                System.out.println("dato no encontrado");
            }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arrchar",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // exp ::= exp COMA CADENA 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		cadenaExp = cadenaExp+c+" "+cad;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // exp ::= exp COMA ID 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Object val = null;
            String charr = null;
            for(NodoSym sym:TS){
                if(sym.getNombre().equals(id)){
                    val = sym.getValor();
                    if (val instanceof ValorString) {
                        charr = ((ValorString) val).getValor();
                    } else if (val instanceof ValorDouble) {
                        charr = ((ValorDouble) val).getValor().toString();
                    break;
                    }
                }
            }
            if(charr!=null){
                cadenaExp = cadenaExp+c+" "+charr;
            } else {
                System.out.println("dato no encontrado");
            }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // exp ::= CADENA 
            {
              Object RESULT =null;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cad = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		cadenaExp = cadenaExp+" "+cad;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // exp ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            String charr = null;
            for(NodoSym sym:TS){
                if(sym.getNombre().equals(id)){
                    Object val = sym.getValor();
                    if (val instanceof ValorString) {
                        charr = ((ValorString) val).getValor();
                    }else if (val instanceof ValorDouble) {
                        charr = ((ValorDouble) val).getValor().toString();
                    break;
                    }
                }
            }
            if(charr != null){
                cadenaExp = cadenaExp+" "+charr;
            } else {
                System.out.println("dato no encontrado");
            }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // g ::= GPIE PARIZQ sentgp EXEC GPIE END PYC PARDER END PYC 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		DGRAHPP d = (DGRAHPP)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		FUNC_GRAFICAR.GPIE(d);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("g",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // g ::= GBAR PARIZQ sentgb EXEC GBAR END PYC PARDER END PYC 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		DGRAHPB d = (DGRAHPB)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		FUNC_GRAFICAR.GBAR(d);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("g",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // g ::= GLINE PARIZQ sentgl EXEC GLINE END PYC PARDER END PYC 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		DGRAHPL d = (DGRAHPL)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		FUNC_GRAFICAR.GLINE(d);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("g",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // g ::= GHIS PARIZQ sentgh EXEC GHIS END PYC PARDER END PYC 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		DGRAHPH d = (DGRAHPH)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		
        FUNC_GRAFICAR.GHIS(d);
        String resp = FUNC_GRAFICAR.PrintTable(d);
        RESP r = new RESP(new respString(resp));
        resultad.add(r);
        System.out.println(resp);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("g",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // sentgp ::= lbel values titl 
            {
              DGRAHPP RESULT =null;
		int acleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int acright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> ac = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int adright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Double> ad = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.out.println("-GPIE-");
        DGRAHPP pie = new DGRAHPP((String) t.toString(),ac,ad);
        RESULT = pie;

    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentgp",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // NT$5 ::= 
            {
              ArrayList<String> RESULT =null;
listSG.clear();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$5",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // lbel ::= LBEL DPD CHAR IG NT$5 CORIZQ pls CORDER END PYC 
            {
              ArrayList<String> RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (ArrayList<String>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
        ArrayList sec_listSG = new ArrayList();
        sec_listSG = (ArrayList)listSG.clone();
        RESULT = sec_listSG;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lbel",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // pls ::= pls COMA CADENA 
            {
              Object RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String pl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		listSG.add(pl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pls",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // pls ::= pls COMA ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        String charr = null;
        String type = "char";
        for (NodoSym sym : TS) {
            if (sym.getNombre().equals(id) && sym.getTipo().equals(type)) {
                Object val = sym.getValor();
                if (val instanceof ValorString) {
                    charr = ((ValorString) val).getValor();
                    break;
                }
            }
        }
        if (charr != null) {
            listSG.add(charr);
        } else {
            System.out.println("Dato no encontrado");
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pls",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // pls ::= CADENA 
            {
              Object RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String pl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		listSG.add(pl);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pls",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // pls ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        String charr = null;
        String type = "char";
        for (NodoSym sym : TS) {
            if (sym.getNombre().equals(id) && sym.getTipo().equals(type)) {
                Object val = sym.getValor();
                if (val instanceof ValorString) {
                    charr = ((ValorString) val).getValor();
                    break;
                }
            }
        }
        if (charr != null) {
            listSG.add(charr);
        } else {
            System.out.println("Dato no encontrado");
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pls",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // NT$6 ::= 
            {
              ArrayList<Double> RESULT =null;
listDG.clear();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$6",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // values ::= VALS DPD DOUBLE IG NT$6 CORIZQ vls CORDER END PYC 
            {
              ArrayList<Double> RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (ArrayList<Double>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
        ArrayList sec_listDG = new ArrayList();
        sec_listDG = (ArrayList)listDG.clone();
        RESULT = sec_listDG;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("values",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // vls ::= vls COMA NUM 
            {
              Object RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String vl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		listDG.add(Double.parseDouble(vl));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vls",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // vls ::= vls COMA ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Double num = null;
            String type = "double";
            for (NodoSym sym : TS) {
                if (sym.getNombre().equals(id) && sym.getTipo().equals(type)) {
                    Object val = sym.getValor();
                    if (val instanceof ValorDouble) {
                        num = ((ValorDouble) val).getValor();
                        break;
                    }
                }
            }
            if (num != null) {
                listDG.add(num);
            } else {
                System.out.println("Dato no encontrado");
            }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vls",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // vls ::= NUM 
            {
              Object RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String vl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		listDG.add(Double.parseDouble(vl));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vls",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // vls ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Double num = null;
            String type = "double";
            for (NodoSym sym : TS) {
                if (sym.getNombre().equals(id) && sym.getTipo().equals(type)) {
                    Object val = sym.getValor();
                    if (val instanceof ValorDouble) {
                        num = ((ValorDouble) val).getValor();
                        break;
                    }
                }
            }
            if (num != null) {
               listDG.add(num);
            } else {
                System.out.println("Dato no encontrado");
            }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vls",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // titl ::= TITLE DPD CHAR IG CADENA END PYC 
            {
              Object RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = ca;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("titl",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentgb ::= titl ejx ejy tx ty 
            {
              DGRAHPB RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ejxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ejxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<String> ejx = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ejyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ejyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Double> ejy = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String tx = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.out.println("-GBAR-");
        DGRAHPB bar = new DGRAHPB((String) t.toString(),tx,ty,ejx,ejy);
        RESULT = bar;

    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentgb",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // NT$7 ::= 
            {
              ArrayList<String> RESULT =null;
listSG.clear();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$7",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ejx ::= EJX DPD CHAR NT$7 IG CORIZQ pls CORDER END PYC 
            {
              ArrayList<String> RESULT =null;
              // propagate RESULT from NT$7
                RESULT = (ArrayList<String>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		
        ArrayList sec_listSG = new ArrayList();
        sec_listSG = (ArrayList)listSG.clone();
        RESULT = sec_listSG;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ejx",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // NT$8 ::= 
            {
              ArrayList<Double> RESULT =null;
listDG.clear();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$8",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ejy ::= EJY DPD DOUBLE IG NT$8 CORIZQ vls CORDER END PYC 
            {
              ArrayList<Double> RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (ArrayList<Double>) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		
        ArrayList sec_listDG = new ArrayList();
        sec_listDG = (ArrayList)listDG.clone();
        RESULT = sec_listDG;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ejy",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // tx ::= TX DPD CHAR IG CADENA END PYC 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = c;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tx",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ty ::= TY DPD CHAR IG CADENA END PYC 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = c;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ty",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // sentgl ::= titl ejx ejy tx ty 
            {
              DGRAHPL RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int ejxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int ejxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		ArrayList<String> ejx = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int ejyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int ejyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Double> ejy = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int txleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int txright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String tx = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ty = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.out.println("-GLINE-");
        DGRAHPL line = new DGRAHPL((String) t.toString(),tx,ty,ejx,ejy);
        RESULT = line;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentgl",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // sentgh ::= titl values 
            {
              DGRAHPH RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int adleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int adright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Double> ad = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        System.out.println("-GHIS-");
        DGRAHPH his = new DGRAHPH((String) t.toString(),ad);
        RESULT = his;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentgh",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
