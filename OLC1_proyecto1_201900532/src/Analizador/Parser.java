
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analizador;

import java_cup.runtime.*;
import java.util.ArrayList;
import Func.Function;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\060\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\003\000\002\004\003\000\002\005\005\000" +
    "\002\005\005\000\002\006\011\000\002\026\002\000\002" +
    "\006\010\000\002\022\003\000\002\022\003\000\002\017" +
    "\005\000\002\017\005\000\002\017\005\000\002\017\005" +
    "\000\002\020\010\000\002\020\010\000\002\020\010\000" +
    "\002\020\010\000\002\020\010\000\002\020\010\000\002" +
    "\021\005\000\002\021\003\000\002\013\003\000\002\015" +
    "\010\000\002\015\010\000\002\015\010\000\002\015\010" +
    "\000\002\015\010\000\002\015\003\000\002\027\002\000" +
    "\002\007\012\000\002\030\002\000\002\007\012\000\002" +
    "\024\005\000\002\024\003\000\002\010\005\000\002\010" +
    "\003\000\002\011\003\000\002\025\005\000\002\025\003" +
    "\000\002\014\005\000\002\014\003\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\004\017\005\001\002\000\004\002\226\001" +
    "\002\000\006\016\006\022\013\001\002\000\004\010\121" +
    "\001\002\000\010\015\117\016\006\022\013\001\002\000" +
    "\010\015\ufffa\016\ufffa\022\ufffa\001\002\000\010\015\ufffb" +
    "\016\ufffb\022\ufffb\001\002\000\010\015\ufffe\016\006\022" +
    "\013\001\002\000\004\010\014\001\002\000\006\005\017" +
    "\006\015\001\002\000\004\012\037\001\002\000\010\015" +
    "\ufff8\016\ufff8\022\ufff8\001\002\000\004\012\020\001\002" +
    "\000\004\023\021\001\002\000\004\007\uffdf\001\002\000" +
    "\004\007\023\001\002\000\006\023\024\024\025\001\002" +
    "\000\004\004\uffda\001\002\000\004\021\033\001\002\000" +
    "\004\004\027\001\002\000\004\014\030\001\002\000\010" +
    "\015\uffde\016\uffde\022\uffde\001\002\000\006\011\034\025" +
    "\035\001\002\000\006\011\uffd8\025\uffd8\001\002\000\006" +
    "\011\uffd7\025\uffd7\001\002\000\004\021\033\001\002\000" +
    "\004\004\uffdb\001\002\000\006\011\uffd9\025\uffd9\001\002" +
    "\000\004\023\040\001\002\000\004\007\uffdd\001\002\000" +
    "\004\007\042\001\002\000\006\023\043\024\044\001\002" +
    "\000\004\004\uffd5\001\002\000\016\020\050\026\051\027" +
    "\060\032\053\033\055\034\054\001\002\000\004\004\046" +
    "\001\002\000\004\014\047\001\002\000\010\015\uffdc\016" +
    "\uffdc\022\uffdc\001\002\000\010\011\uffe0\025\uffe0\031\uffe0" +
    "\001\002\000\004\030\110\001\002\000\006\011\uffd2\025" +
    "\uffd2\001\002\000\004\030\103\001\002\000\004\030\076" +
    "\001\002\000\004\030\071\001\002\000\006\011\uffd3\025" +
    "\uffd3\001\002\000\006\011\066\025\067\001\002\000\004" +
    "\030\061\001\002\000\016\020\050\026\051\027\060\032" +
    "\053\033\055\034\054\001\002\000\004\011\063\001\002" +
    "\000\016\020\050\026\051\027\060\032\053\033\055\034" +
    "\054\001\002\000\004\031\065\001\002\000\012\004\uffe4" +
    "\011\uffe4\025\uffe4\031\uffe4\001\002\000\016\020\050\026" +
    "\051\027\060\032\053\033\055\034\054\001\002\000\004" +
    "\004\uffd6\001\002\000\006\011\uffd4\025\uffd4\001\002\000" +
    "\016\020\050\026\051\027\060\032\053\033\055\034\054" +
    "\001\002\000\004\011\073\001\002\000\016\020\050\026" +
    "\051\027\060\032\053\033\055\034\054\001\002\000\004" +
    "\031\075\001\002\000\012\004\uffe2\011\uffe2\025\uffe2\031" +
    "\uffe2\001\002\000\016\020\050\026\051\027\060\032\053" +
    "\033\055\034\054\001\002\000\004\011\100\001\002\000" +
    "\016\020\050\026\051\027\060\032\053\033\055\034\054" +
    "\001\002\000\004\031\102\001\002\000\012\004\uffe1\011" +
    "\uffe1\025\uffe1\031\uffe1\001\002\000\016\020\050\026\051" +
    "\027\060\032\053\033\055\034\054\001\002\000\004\011" +
    "\105\001\002\000\016\020\050\026\051\027\060\032\053" +
    "\033\055\034\054\001\002\000\004\031\107\001\002\000" +
    "\012\004\uffe3\011\uffe3\025\uffe3\031\uffe3\001\002\000\016" +
    "\020\050\026\051\027\060\032\053\033\055\034\054\001" +
    "\002\000\004\011\112\001\002\000\016\020\050\026\051" +
    "\027\060\032\053\033\055\034\054\001\002\000\004\031" +
    "\114\001\002\000\012\004\uffe5\011\uffe5\025\uffe5\031\uffe5" +
    "\001\002\000\010\015\ufffc\016\ufffc\022\ufffc\001\002\000" +
    "\010\015\ufffd\016\ufffd\022\ufffd\001\002\000\004\002\000" +
    "\001\002\000\010\015\uffff\016\006\022\013\001\002\000" +
    "\006\005\124\006\122\001\002\000\004\012\135\001\002" +
    "\000\010\015\ufff9\016\ufff9\022\ufff9\001\002\000\004\012" +
    "\125\001\002\000\004\013\126\001\002\000\004\007\127" +
    "\001\002\000\006\013\131\021\132\001\002\000\004\004" +
    "\133\001\002\000\004\004\ufff3\001\002\000\004\004\ufff4" +
    "\001\002\000\004\014\134\001\002\000\010\015\ufff7\016" +
    "\ufff7\022\ufff7\001\002\000\004\013\136\001\002\000\004" +
    "\007\137\001\002\000\034\013\ufff6\020\ufff6\026\ufff6\027" +
    "\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6\037\ufff6" +
    "\040\ufff6\041\ufff6\042\ufff6\001\002\000\034\013\151\020" +
    "\142\026\051\027\060\032\053\033\055\034\054\035\152" +
    "\036\150\037\141\040\146\041\145\042\153\001\002\000" +
    "\004\030\221\001\002\000\004\004\uffe0\001\002\000\004" +
    "\004\215\001\002\000\010\015\ufff5\016\ufff5\022\ufff5\001" +
    "\002\000\004\030\210\001\002\000\004\030\203\001\002" +
    "\000\004\004\201\001\002\000\004\030\174\001\002\000" +
    "\004\004\172\001\002\000\004\030\165\001\002\000\004" +
    "\030\154\001\002\000\004\024\155\001\002\000\016\020" +
    "\050\026\051\027\060\032\053\033\055\034\054\001\002" +
    "\000\006\011\uffe6\025\uffe6\001\002\000\006\011\uffe7\025" +
    "\uffe7\001\002\000\006\011\161\025\162\001\002\000\016" +
    "\020\050\026\051\027\060\032\053\033\055\034\054\001" +
    "\002\000\004\031\163\001\002\000\004\004\uffe9\001\002" +
    "\000\006\011\uffe8\025\uffe8\001\002\000\004\024\166\001" +
    "\002\000\016\020\050\026\051\027\060\032\053\033\055" +
    "\034\054\001\002\000\006\011\161\025\170\001\002\000" +
    "\004\031\171\001\002\000\004\004\uffee\001\002\000\004" +
    "\014\173\001\002\000\010\015\uffef\016\uffef\022\uffef\001" +
    "\002\000\004\024\175\001\002\000\016\020\050\026\051" +
    "\027\060\032\053\033\055\034\054\001\002\000\006\011" +
    "\161\025\177\001\002\000\004\031\200\001\002\000\004" +
    "\004\uffed\001\002\000\004\014\202\001\002\000\010\015" +
    "\ufff0\016\ufff0\022\ufff0\001\002\000\004\024\204\001\002" +
    "\000\016\020\050\026\051\027\060\032\053\033\055\034" +
    "\054\001\002\000\006\011\161\025\206\001\002\000\004" +
    "\031\207\001\002\000\004\004\uffeb\001\002\000\004\024" +
    "\211\001\002\000\016\020\050\026\051\027\060\032\053" +
    "\033\055\034\054\001\002\000\006\011\161\025\213\001" +
    "\002\000\004\031\214\001\002\000\004\004\uffea\001\002" +
    "\000\004\014\216\001\002\000\010\015\ufff1\016\ufff1\022" +
    "\ufff1\001\002\000\004\014\220\001\002\000\010\015\ufff2" +
    "\016\ufff2\022\ufff2\001\002\000\004\024\222\001\002\000" +
    "\016\020\050\026\051\027\060\032\053\033\055\034\054" +
    "\001\002\000\006\011\161\025\224\001\002\000\004\031" +
    "\225\001\002\000\004\004\uffec\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\224\000\004\002\003\001\001\000\002\001\001\000" +
    "\012\003\006\004\011\005\010\016\007\001\001\000\002" +
    "\001\001\000\010\004\117\005\010\016\007\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\005\115\016\114" +
    "\001\001\000\002\001\001\000\004\007\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\021\001\001\000\002\001\001\000" +
    "\004\024\025\001\001\000\002\001\001\000\006\010\030" +
    "\011\031\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\040\001\001" +
    "\000\002\001\001\000\004\025\044\001\001\000\002\001" +
    "\001\000\010\012\055\014\056\015\051\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\061\001\001" +
    "\000\002\001\001\000\004\015\063\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\067\015\051\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\071\001" +
    "\001\000\002\001\001\000\004\015\073\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\015\076\001\001\000" +
    "\002\001\001\000\004\015\100\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\103\001\001\000\002\001" +
    "\001\000\004\015\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\110\001\001\000\002\001\001\000" +
    "\004\015\112\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\115\016\114\001\001\000\004\006\122\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\022\127\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\026\137\001\001\000\010\015\142\017" +
    "\143\020\146\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\156\015\155\021\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\013" +
    "\163\015\155\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\013\156\015" +
    "\155\021\166\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\013\156\015\155\021\175\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\156\015\155\021\204\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\013\156\015\155\021\211\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\156\015\155\021\222\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado = "";

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }

    public static ArrayList<Double> listE = new ArrayList<>();
    public static ArrayList<NodoSym> TS = new ArrayList<>();
    public static ArrayList<Double> listD = new ArrayList<>();
    public static ArrayList<String> listS = new ArrayList<>();



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= star EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // star ::= PROGRAM program ENDP 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("star",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= program lins 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= lins 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // lins ::= lins d 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lins",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lins ::= lins g 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lins",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lins ::= d 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lins",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // lins ::= g 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lins",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // d ::= VAR DP type_d 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("d",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // d ::= ARRAY DP type_arr 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("d",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type_d ::= CHAR DPD ID FLIZQ dvc END PYC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cadleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cadright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object cad = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        System.out.println(id.toString()+"->"+cad.toString());
        NodoSym Varchar = new NodoSym(id,cad,"char");
        TS.add(Varchar);
     
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_d",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NT$0 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

        System.out.println(id); listE.clear();
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$0",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type_d ::= DOUBLE DPD ID FLIZQ NT$0 n 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        NodoSym Vardouble = new NodoSym(id,v,"double");
        TS.add(Vardouble);
        System.out.println(v);
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_d",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // dvc ::= CADENA 
            {
              Object RESULT =null;
		int cadeleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caderight = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String cade = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        RESULT = cade;
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dvc",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // dvc ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
        Object val = null;
        String type = "char";
        for(NodoSym sym:TS){
            if(sym.getNombre().equals(id) && sym.getTipo().equals(type)){
                val = sym.getValor();
                break;
            }
        }
        if (val != null){
            RESULT = val ;
        } else {
            RESULT = "NO encontrado o tipo  no valido";
        }
    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dvc",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // n ::= NUM END PYC 
            {
              Object RESULT =null;
		int numberleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int numberright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String number = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = number;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("n",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // n ::= o END PYC 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = n1;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("n",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // n ::= e END PYC 
            {
              Object RESULT =null;
		int n2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = n2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("n",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // n ::= ID END PYC 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
            Object val = null;
            String type = "double";
            for(NodoSym sym:TS){
                if(sym.getNombre().equals(id) && sym.getTipo().equals(type)){
                    val = sym.getValor();
                    break;
                }
            }
            if (val != null){
                RESULT = val ;
            } else {
                RESULT = "NO encontrado o tipo  no valido";
            }
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("n",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // e ::= MEDIA PARIZQ CORIZQ nm CORDER PARDER 
            {
              Object RESULT =null;
		
            if (listE.size()>0){
                double prom;
                prom = Function.Media(listE);
                RESULT = prom;
            }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // e ::= MODA PARIZQ CORIZQ nm CORDER PARDER 
            {
              Object RESULT =null;
		
        if (listE.size()>0){
            double mod;
            mod = Function.Moda(listE);
            RESULT = mod;
        }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // e ::= MEDIANA PARIZQ CORIZQ nm CORDER PARDER 
            {
              Object RESULT =null;
		
           if (listE.size()>0){
             double mediana;
             mediana = Function.Mediana(listE);
             RESULT = mediana;
           }
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // e ::= VARIANZA PARIZQ CORIZQ nm CORDER PARDER 
            {
              Object RESULT =null;
		
        if (listE.size()>0){
            double varianza;
            varianza = Function.Varianza(listE);
            RESULT = varianza;
        }
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // e ::= MAX PARIZQ CORIZQ nm CORDER PARDER 
            {
              Object RESULT =null;
		
         if (listE.size()>0){
            double max;
            max = Function.Max(listE);
            RESULT = max;
         }
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // e ::= MIN PARIZQ CORIZQ nm CORDER PARDER 
            {
              Object RESULT =null;
		
       if (listE.size()>0){
            double min;
            min = Function.Min(listE);
            RESULT = min;
       }
      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("e",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // nm ::= nm COMA valorn 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nm",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // nm ::= valorn 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nm",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // valorn ::= o 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = listE.add(n);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorn",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // o ::= SUM PARIZQ o COMA o PARDER 
            {
              Double RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Double v1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double v2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = v1 + v2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("o",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // o ::= RESTA PARIZQ o COMA o PARDER 
            {
              Double RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Double v1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double v2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = v1 - v2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("o",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // o ::= MULTI PARIZQ o COMA o PARDER 
            {
              Double RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Double v1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double v2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = v1 * v2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("o",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // o ::= DIV PARIZQ o COMA o PARDER 
            {
              Double RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Double v1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double v2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = v1 / v2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("o",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // o ::= MOD PARIZQ o COMA o PARDER 
            {
              Double RESULT =null;
		int v1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int v1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Double v1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int v2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int v2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Double v2 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = v1 % v2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("o",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // o ::= NUM 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = Double.valueOf(n);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("o",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // NT$1 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
System.out.println(id);listS.clear();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$1",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type_arr ::= CHAR DPD IDARR NT$1 FLIZQ avp END PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                System.out.println(list);
                NodoSym arrS = new NodoSym(id,list,"Arreglo_char");
                TS.add(arrS);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_arr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // NT$2 ::= 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
System.out.println(id);listD.clear();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NT$2",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type_arr ::= DOUBLE DPD IDARR NT$2 FLIZQ avn END PYC 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object list = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                System.out.println(list);
                NodoSym arrD = new NodoSym(id,list,"Arreglo_double");
                TS.add(arrD);
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type_arr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // avp ::= CORIZQ pals CORDER 
            {
              Object RESULT =null;
		
            ArrayList<Object> listSClone = new ArrayList<>();
            listSClone = (ArrayList)listS.clone();
            RESULT = listSClone;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("avp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // avp ::= IDARR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Object val = null;
            String type = "Arreglo_char";
            for(NodoSym sym:TS){
                if(sym.getNombre().equals(id) && sym.getTipo().equals(type)){
                    val = sym.getValor();
                    break;
                }
            }
            if(val != null){
                RESULT = val;
            }else{
                RESULT = "dato no encontrado o tipo no valido";
            }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("avp",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // pals ::= pals COMA valorChar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pals",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // pals ::= valorChar 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pals",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // valorChar ::= CADENA 
            {
              String RESULT =null;
		int caleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int caright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String ca = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		listS.add(ca);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorChar",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // avn ::= CORIZQ nums CORDER 
            {
              Object RESULT =null;
		
            ArrayList<Object> listDClone = new ArrayList<>();
            listDClone = (ArrayList)listD.clone();
            RESULT = listDClone;
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("avn",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // avn ::= IDARR 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Object val = null;
            String type = "Arreglo_double";
            for(NodoSym sym:TS){
                if(sym.getNombre().equals(id) && sym.getTipo().equals(type)){
                    val = sym.getValor();
                    break;
                }
            }
            if(val != null){
                RESULT = val;
            }else{
                RESULT = "dato no encontrado o tipo no valido";
            }
        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("avn",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // nums ::= nums COMA valorNum 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nums",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // nums ::= valorNum 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nums",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // valorNum ::= o 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Double n1 = (Double)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		listD.add(n1);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("valorNum",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
