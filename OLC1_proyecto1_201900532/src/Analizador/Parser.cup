// ------------  Paquete e importaciones ------------
package Analizador;

import java_cup.runtime.*;


//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error

parser code
{:
    public String resultado = "";

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }

:};


//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}


//------> Declaración de terminales

terminal String END;
terminal String CHAR;
terminal String DOUBLE;
terminal String FLIZQ;
terminal String DP;
terminal String COMA;
terminal String DPD;
terminal String ID;
terminal String PYC;
terminal String ENDP;
terminal String VAR;
terminal String COMI;
terminal string PROGRAM;
terminal String NUM;
terminal String CADENA;
terminal String ARRAY;
terminal String IDARR;
terminal String CORIZQ;
terminal String CORDER;
terminal String SUM;
terminal String RESTA;
terminal String PARIZQ;
terminal String PARDER;
terminal String ADD;
terminal String MINUS;

//------> Declaración de no terminales
non terminal star;
non terminal program;
non terminal lins;
non terminal d;
non terminal type_d;
non terminal type_arr;
non terminal m;
non terminal pals;
non terminal valorChar;
non terminal valorNum;
non terminal nums;
non terminal Double o;
non terminal g;


precedence left VAR,ARRAY;
precedence left COMI, CADENA;
precedence left SUM, NUM;
precedence left RESTA;


//------> Definir Simbolo Inicial

start with star;

// ------------>  Producciones  <------------
star ::= PROGRAM program ENDP
;
program ::= program lins
            |lins
;

lins::= lins d
        |lins o:n1 PYC {:System.out.println(n1);:}
        |lins g
        |d
        |o
        |g
;

d ::= VAR DP type_d
      |ARRAY DP type_arr
;

o ::= SUM PARIZQ o:v1 ADD o:v2  PARDER  {:RESULT = v1 + v2;:}
    |RESTA PARIZQ o:v1  MINUS o:v2 PARDER  {:RESULT = v1 - v2;:}
    | NUM:n {:RESULT = Double.valueOf(n);:}
;

type_d ::= CHAR DPD ID:id FLIZQ COMI CADENA:cade COMI END PYC {:System.out.println(id.toString()+"::"+cade.toString());:}
         |DOUBLE DPD ID:id FLIZQ {:System.out.println(id);:} NUM:number END PYC {:System.out.println(number);:}
;


type_arr ::= CHAR DPD IDARR:idarr {:System.out.println(idarr.toString()+" -- ");:} FLIZQ CORIZQ pals CORDER END PYC
            |DOUBLE DPD IDARR:id {:System.out.println(id.toString());:} FLIZQ CORIZQ nums CORDER END PYC
;

pals::= pals COMA valorChar
        | valorChar
;
valorChar ::= COMI CADENA:ca COMI {:System.out.println(ca.toString());:}
;

nums ::= nums COMA valorNum
        | valorNum
;
valorNum ::= NUM:nu {:System.out.println(nu.toString());:}
;

