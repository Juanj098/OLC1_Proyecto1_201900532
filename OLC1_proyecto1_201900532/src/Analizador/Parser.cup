// ------------  Paquete e importaciones ------------
package Analizador;

import java_cup.runtime.*;
import java.util.ArrayList;
import Func.Function;


//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error

parser code
{:
    public String resultado = "";

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }

    public static ArrayList<Double> listE = new ArrayList<>();
    public static ArrayList<NodoSym> TS = new ArrayList<>();
    public static ArrayList<Double> listD = new ArrayList<>();
    public static ArrayList<String> listS = new ArrayList<>();
    public static  String cadenaExp ="";
    public static  String cadenaArr ="";

:};


//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}


//------> Declaración de terminales

terminal String END;
terminal String CHAR;
terminal String DOUBLE;
terminal String FLIZQ;
terminal String FLDER;
terminal String DP;
terminal String COMA;
terminal String DPD;
terminal String ID;
terminal String PYC;
terminal String ENDP;
terminal String VAR;
terminal string PROGRAM;
terminal String NUM;
terminal String CADENA;
terminal String ARRAY;
terminal String IDARR;
terminal String CORIZQ;
terminal String CORDER;
terminal String SUM;
terminal String RESTA;
terminal String PARIZQ;
terminal String PARDER;
terminal String MULTI;
terminal String DIV;
terminal String MOD;
terminal String MEDIA;
terminal String MODA;
terminal String MEDIANA;
terminal String VARIANZA;
terminal String MAX;
terminal String MIN;
terminal String CONSO;
terminal String PRINT;
terminal String IG;
terminal String COLUM;

//------> Declaración de no terminales
non terminal star;
non terminal program;
non terminal lins;
non terminal d;
non terminal type_d;
non terminal type_arr;
non terminal pals;
non terminal String valorChar;
non terminal valorNum;
non terminal valorn;
non terminal nums;
non terminal numbers;
non terminal number;
non terminal Double o;
non terminal g;
non terminal Double n;
non terminal Double e;
non terminal Double nm;
non terminal String dvc;
non terminal ArrayList<String> avp;
non terminal ArrayList<Double> avn;
non terminal pr;
non terminal printexp;
non terminal printarr;
non terminal exp;
non terminal title;
non terminal arr;
non terminal arrnum;
non terminal arrchar;
non terminal words;
non terminal word;

precedence left CONSO;
precedence left VAR,ARRAY;
precedence left SUM, RESTA;
precedence left MULTI,DIV,MOD;
precedence left NUM;


//------> Definir Simbolo Inicial

start with star;

// ------------>  Producciones  <------------
star ::= PROGRAM program ENDP
;
program ::= program lins
            |lins
;

lins::= lins d
        |lins g
        |lins pr
        |d
        |g
        |pr
;

d ::= VAR DP type_d
      |ARRAY DP type_arr
;

type_d ::= CHAR DPD ID:id FLIZQ dvc:cad END PYC
     {:
        System.out.println(id.toString()+"->"+cad.toString());
        NodoSym Varchar = new NodoSym(id,new ValorString(cad),"char");
        TS.add(Varchar);
     :}
         |DOUBLE DPD ID:id FLIZQ
    {:
        System.out.println(id); listE.clear();
    :} n:v
    {:
        NodoSym Vardouble = new NodoSym(id, new ValorDouble(v),"double");
        TS.add(Vardouble);
        System.out.println(v);
    :}
;

dvc::=CADENA:cade
    {:
        RESULT = cade;
    :}
    |ID:id
    {:
        Object val = null;
        String type = "char";
        String dato = null;
        for(NodoSym sym:TS){
            if(sym.getNombre().equals(id) && sym.getTipo().equals(type)){
                val = sym.getValor();
                dato = ((ValorString) val).getValor();
                break;
            }
        }
        if (val != null){
            RESULT = dato;
        } else {
            RESULT = null;
        }
    :}
;

n ::= NUM:number END PYC
      {:
        Double nu = Double.parseDouble(number);
        RESULT = nu;
      :}
      |o:n1 END PYC {:RESULT = n1;:}
      |e:n2 END PYC {:RESULT = n2;:}
      |ID:id END PYC
      {:
            Object val = null;
            String type = "double";
            Double dato = null;
            for(NodoSym sym:TS){
                if(sym.getNombre().equals(id) && sym.getTipo().equals(type)){
                    val = sym.getValor();
                    dato = ((ValorDouble) val).getValor();
                    break;
                }
            }
            if (val != null){
                RESULT = dato;
            } else {
                RESULT = null;
            }
      :}
;

e::=  MEDIA PARIZQ CORIZQ nm CORDER PARDER
        {:
        if (listE.size()>0){
            double prom;
            prom = Function.Media(listE);
            RESULT = prom;
        }
        :}
     |MODA PARIZQ CORIZQ nm CORDER PARDER
        {:
        if (listE.size()>0){
            double mod;
            mod = Function.Moda(listE);
            RESULT = mod;
        }
        :}
      |MEDIANA PARIZQ CORIZQ nm CORDER PARDER
      {:
           if (listE.size()>0){
             double mediana;
             mediana = Function.Mediana(listE);
             RESULT = mediana;
           }
      :}
      |VARIANZA PARIZQ CORIZQ nm CORDER PARDER
      {:
        if (listE.size()>0){
            double varianza;
            varianza = Function.Varianza(listE);
            RESULT = varianza;
        }
      :}
      |MAX PARIZQ CORIZQ nm CORDER PARDER
      {:
         if (listE.size()>0){
            double max;
            max = Function.Max(listE);
            RESULT = max;
         }
      :}
      |MIN PARIZQ CORIZQ nm CORDER PARDER
      {:
       if (listE.size()>0){
            double min;
            min = Function.Min(listE);
            RESULT = min;
       }
      :}
;

nm ::=  nm COMA valorn
    |valorn
;

valorn ::=o:n
{:
    RESULT = listE.add(n);
:}
;

o ::= SUM PARIZQ o:v1 COMA o:v2  PARDER  {:RESULT = v1 + v2;:}
    |RESTA PARIZQ o:v1  COMA o:v2 PARDER  {:RESULT = v1 - v2;:}
    |MULTI PARIZQ o:v1 COMA o:v2 PARDER {:RESULT = v1 * v2;:}
    |DIV PARIZQ o:v1 COMA o:v2 PARDER {:RESULT = v1 / v2;:}
    |MOD PARIZQ o:v1 COMA o:v2 PARDER {:RESULT = v1 % v2;:}
    |NUM:n {:RESULT = Double.valueOf(n);:}
;

type_arr ::= CHAR DPD IDARR:id {:System.out.println(id);listS.clear();:} FLIZQ avp:list END PYC
            {:
                System.out.println(list);
                NodoSym arrS = new NodoSym(id,new ArrayString(list),"Arreglo_char");
                TS.add(arrS);
            :}
            |DOUBLE DPD IDARR:id {:System.out.println(id);listD.clear();:} FLIZQ avn:list END PYC
            {:
                System.out.println(list);
                NodoSym arrD = new NodoSym(id,new ArrayDouble(list),"Arreglo_double");
                TS.add(arrD);
            :}
;

avp ::= CORIZQ pals CORDER
        {:
            ArrayList<String> listSClone = new ArrayList<>();
            listSClone = (ArrayList)listS.clone();
            RESULT = listSClone;
        :}
        |IDARR:id
        {:
            Object val = null;
            String type = "Arreglo_char";
            ArrayList<String> arr = null;
            for(NodoSym sym:TS){
                if(sym.getNombre().equals(id) && sym.getTipo().equals(type)){
                    val = sym.getValor();
                    arr = ((ArrayString) val).getValor();
                    break;
                }
            }
            if(val != null){
                RESULT = arr;
            }else{
                RESULT = null;
            }
        :}
;

pals::= pals COMA valorChar
        | valorChar
;

valorChar ::= CADENA:ca {:listS.add(ca);:}
;

avn ::= CORIZQ nums CORDER
        {:
            ArrayList<Double> listDClone = new ArrayList<>();
            listDClone = (ArrayList)listD.clone();
            RESULT = listDClone;
        :}
        |IDARR:id
        {:
            Object val = null;
            String type = "Arreglo_double";
            ArrayList<Double> arr = null;
            for(NodoSym sym:TS){
                if(sym.getNombre().equals(id) && sym.getTipo().equals(type)){
                    val = sym.getValor();
                    arr = ((ArrayDouble) val).getValor();
                    break;
                }
            }
            if(val != null){
                RESULT = arr;
            }else{
                RESULT = null;
            }
        :}
;

nums ::= nums COMA valorNum
        |valorNum
;

valorNum ::= o:n1 {:listD.add(n1);:}
;

pr ::= printexp
      |printarr
;

printexp ::= CONSO DPD PRINT {:cadenaExp="";:} IG exp END PYC
{:System.out.println(cadenaExp);:}
;

printarr::= CONSO DPD COLUM {:cadenaArr = "<--------------->\n";:} IG title FLDER arr END PYC
{:
    cadenaArr = cadenaArr+"<--------------->";
    System.out.println(cadenaArr);
:}
;

title::= CADENA:c
        {:
        cadenaArr = cadenaArr+"   "+c+"   "+"\n";
        :}
        |IDARR:id
        {:
        cadenaArr = cadenaArr+"   "+id+"   ";

        :}
;

arr ::=IDARR:id
        {:
              Object val = null;
              for(NodoSym sym:TS){
                  if(sym.getNombre().equals(id)){
                      val = sym.getValor();
                      if (val instanceof ArrayString) {
                          ArrayList<String> arr = ((ArrayString) val).getValor();
                          for(int i =0;i>arr.size();i++){
                              cadenaArr = cadenaArr+arr.get(i)+"\n";
                          }
                      } else if (val instanceof ArrayDouble) {
                          ArrayList<Double> arr = ((ArrayDouble) val).getValor();
                          for(int i =0;i>arr.size();i++){
                                cadenaArr = cadenaArr+arr.get(i).toString()+"\n";
                          }
                      break;
                      }
                  }
              }
        :}
       |arrnum
       |arrchar
;

arrchar ::= CORIZQ words CORDER
;

arrnum ::= CORIZQ numbers CORDER
;

words ::= words COMA CADENA
          |CADENA
;

numbers ::= numbers COMA NUM
            |NUM
;

exp ::= exp COMA:c CADENA:cad
        {:cadenaExp = cadenaExp+c+" "+cad;:}
        |exp COMA:c ID:id
        {:
            Object val = null;
            String charr = null;
            for(NodoSym sym:TS){
                if(sym.getNombre().equals(id)){
                    val = sym.getValor();
                    if (val instanceof ValorString) {
                        charr = ((ValorString) val).getValor();
                    } else if (val instanceof ValorDouble) {
                        charr = ((ValorDouble) val).getValor().toString();
                    break;
                    }
                }
            }
            if(charr!=null){
                cadenaExp = cadenaExp+c+" "+charr;
            } else {
                System.out.println("dato no encontrado");
            }
        :}
        |CADENA:cad
        {:cadenaExp = cadenaExp+" "+cad;:}
        |ID:id
        {:
            String charr = null;
            for(NodoSym sym:TS){
                if(sym.getNombre().equals(id)){
                    Object val = sym.getValor();
                    if (val instanceof ValorString) {
                        charr = ((ValorString) val).getValor();
                    }else if (val instanceof ValorDouble) {
                        charr = ((ValorDouble) val).getValor().toString();
                    break;
                    }
                }
            }
            if(charr != null){
                cadenaExp = cadenaExp+" "+charr;
            } else {
                System.out.println("dato no encontrado");
            }
        :}
;
