// ------------  Paquete e importaciones ------------
package Analizador;

import java_cup.runtime.*;
import java.util.ArrayList;
import Func.Function;


//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error

parser code
{:
    public String resultado = "";

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }

    public static ArrayList<Double> listE = new ArrayList<>();
    public static ArrayList<NodoSym> TS = new ArrayList<>();
    public static ArrayList<Double> list = new ArrayList<>();

:};


//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}


//------> Declaración de terminales

terminal String END;
terminal String CHAR;
terminal String DOUBLE;
terminal String FLIZQ;
terminal String DP;
terminal String COMA;
terminal String DPD;
terminal String ID;
terminal String PYC;
terminal String ENDP;
terminal String VAR;
terminal String COMI;
terminal string PROGRAM;
terminal String NUM;
terminal String CADENA;
terminal String ARRAY;
terminal String IDARR;
terminal String CORIZQ;
terminal String CORDER;
terminal String SUM;
terminal String RESTA;
terminal String PARIZQ;
terminal String PARDER;
terminal String MULTI;
terminal String DIV;
terminal String MOD;
terminal String MEDIA;
terminal String MODA;

//------> Declaración de no terminales
non terminal star;
non terminal program;
non terminal lins;
non terminal d;
non terminal type_d;
non terminal type_arr;
non terminal pals;
non terminal valorChar;
non terminal valorNum;
non terminal valorn;
non terminal nums;
non terminal Double o;
non terminal g;
non terminal n;
non terminal e;
non terminal nm;


precedence left VAR,ARRAY;
precedence left COMI, CADENA;
precedence left SUM, RESTA;
precedence left MULTI,DIV,MOD;
precedence left NUM;


//------> Definir Simbolo Inicial

start with star;

// ------------>  Producciones  <------------
star ::= PROGRAM program ENDP
;
program ::= program lins
            |lins
;

lins::= lins d
        |lins g
        |d
        |g
;

d ::= VAR DP type_d
      |ARRAY DP type_arr
;

type_d ::= CHAR DPD ID:id FLIZQ COMI CADENA:cade COMI END PYC
{:
    System.out.println(id.toString()+"::"+cade.toString());
    NodoSym Varchar = new NodoSym(id,cade,"char");
    TS.add(Varchar);
:}
         |DOUBLE DPD ID:id FLIZQ
{:
    System.out.println(id); listE.clear();
 :} n:v
 {:
    NodoSym Vardouble = new NodoSym(id,String.valueOf(v),"double");
    TS.add(Vardouble);
      System.out.println(v);
 :}
;

n ::= NUM:number END PYC {:RESULT = number;:}
      |o:n1 END PYC {:RESULT = n1;:}
      |e:n2 END PYC {:RESULT = n2;:}
;

e::=  MEDIA PARIZQ CORIZQ nm CORDER PARDER
         {:
         if (listE.size()>0){
            double prom;
            prom = Function.Media(listE);
            RESULT = prom;
         }
         :}
     |MODA PARIZQ CORIZQ nm CORDER PARDER
        {:
        if (listE.size()>0){
            double mod;
            mod = Function.Moda(listE);
            RESULT = mod;
        }
        :}
;

nm ::=  nm COMA valorn
    |valorn
;

valorn ::=o:n {:RESULT = listE.add(n);:}
;

o ::= SUM PARIZQ o:v1 COMA o:v2  PARDER  {:RESULT = v1 + v2;:}
    |RESTA PARIZQ o:v1  COMA o:v2 PARDER  {:RESULT = v1 - v2;:}
    |MULTI PARIZQ o:v1 COMA o:v2 PARDER {:RESULT = v1 * v2;:}
    |DIV PARIZQ o:v1 COMA o:v2 PARDER {:RESULT = v1 / v2;:}
    |MOD PARIZQ o:v1 COMA o:v2 PARDER {:RESULT = v1 % v2;:}
    |NUM:n {:RESULT = Double.valueOf(n);:}
;

type_arr ::= CHAR DPD IDARR:idarr {:System.out.println(idarr.toString());:} FLIZQ CORIZQ pals CORDER END PYC
            |DOUBLE DPD IDARR:id {:System.out.println(id.toString()); list.clear();:} FLIZQ CORIZQ nums CORDER END PYC {:System.out.println(list);:}
;

pals::= pals COMA valorChar
        | valorChar
;

valorChar ::= COMI CADENA:ca COMI {:System.out.println(ca.toString());:}
;

nums ::= nums COMA valorNum
        |valorNum
;

valorNum ::= o:n1 {:list.add(n1);:}
;

