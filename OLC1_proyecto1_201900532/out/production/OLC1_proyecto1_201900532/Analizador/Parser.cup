// ------------  Paquete e importaciones ------------
package Analizador;

import java_cup.runtime.*;
import java.util.ArrayList;
import Func.Function;


//------> Codigo para el parser
//------> Declaracion de variables, funciones y funciones de error

parser code
{:
    public String resultado = "";

    public void syntax_error(Symbol s)
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Recuperado" );
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
            System.err.println("Error Sintactico: "+ s.value + " - Fila: " + s.right + " - Columna: " + s.left + ". Sin recuperacion." );
    }

    public static ArrayList<Double> listE = new ArrayList<>();
    public static ArrayList<NodoSym> TS = new ArrayList<>();
    public static ArrayList<Double> listD = new ArrayList<>();
    public static ArrayList<String> listS = new ArrayList<>();

:};


//------> Codigo para las acciones gramaticales (no tocar)
action code
{:  :}


//------> Declaración de terminales

terminal String END;
terminal String CHAR;
terminal String DOUBLE;
terminal String FLIZQ;
terminal String DP;
terminal String COMA;
terminal String DPD;
terminal String ID;
terminal String PYC;
terminal String ENDP;
terminal String VAR;
terminal string PROGRAM;
terminal String NUM;
terminal String CADENA;
terminal String ARRAY;
terminal String IDARR;
terminal String CORIZQ;
terminal String CORDER;
terminal String SUM;
terminal String RESTA;
terminal String PARIZQ;
terminal String PARDER;
terminal String MULTI;
terminal String DIV;
terminal String MOD;
terminal String MEDIA;
terminal String MODA;
terminal String MEDIANA;
terminal String VARIANZA;
terminal String MAX;
terminal String MIN;

//------> Declaración de no terminales
non terminal star;
non terminal program;
non terminal lins;
non terminal d;
non terminal type_d;
non terminal type_arr;
non terminal pals;
non terminal String valorChar;
non terminal valorNum;
non terminal valorn;
non terminal nums;
non terminal Double o;
non terminal g;
non terminal n;
non terminal e;
non terminal nm;
non terminal dvc;
non terminal Double rm;
non terminal avp;
non terminal avn;


precedence left VAR,ARRAY;
//precedence left COMI, CADENA;
precedence left SUM, RESTA;
precedence left MULTI,DIV,MOD;
precedence left NUM;


//------> Definir Simbolo Inicial

start with star;

// ------------>  Producciones  <------------
star ::= PROGRAM program ENDP
;
program ::= program lins
            |lins
;

lins::= lins d
        |lins g
        |d
        |g
;

d ::= VAR DP type_d
      |ARRAY DP type_arr
;

type_d ::= CHAR DPD ID:id FLIZQ dvc:cad END PYC
     {:
        System.out.println(id.toString()+"->"+cad.toString());
        NodoSym Varchar = new NodoSym(id,cad,"char");
        TS.add(Varchar);
     :}
         |DOUBLE DPD ID:id FLIZQ
    {:
        System.out.println(id); listE.clear();
    :} n:v
    {:
        NodoSym Vardouble = new NodoSym(id,v,"double");
        TS.add(Vardouble);
        System.out.println(v);
    :}
;

dvc::=CADENA:cade
    {:
        RESULT = cade;
    :}
    |ID:id
    {:
        Object val = null;
        String type = "char";
        for(NodoSym sym:TS){
            if(sym.getNombre().equals(id) && sym.getTipo().equals(type)){
                val = sym.getValor();
                break;
            }
        }
        if (val != null){
            RESULT = val ;
        } else {
            RESULT = "NO encontrado o tipo  no valido";
        }
    :}
;

n ::= NUM:number END PYC {:RESULT = number;:}
      |o:n1 END PYC {:RESULT = n1;:}
      |e:n2 END PYC {:RESULT = n2;:}
      |ID:id END PYC
      {:
            Object val = null;
            String type = "double";
            for(NodoSym sym:TS){
                if(sym.getNombre().equals(id) && sym.getTipo().equals(type)){
                    val = sym.getValor();
                    break;
                }
            }
            if (val != null){
                RESULT = val ;
            } else {
                RESULT = "NO encontrado o tipo  no valido";
            }
      :}
;

e::=  MEDIA PARIZQ CORIZQ nm CORDER PARDER
        {:
            if (listE.size()>0){
                double prom;
                prom = Function.Media(listE);
                RESULT = prom;
            }
        :}
     |MODA PARIZQ CORIZQ nm CORDER PARDER
        {:
        if (listE.size()>0){
            double mod;
            mod = Function.Moda(listE);
            RESULT = mod;
        }
        :}
      |MEDIANA PARIZQ CORIZQ nm CORDER PARDER
      {:
           if (listE.size()>0){
             double mediana;
             mediana = Function.Mediana(listE);
             RESULT = mediana;
           }
      :}
      |VARIANZA PARIZQ CORIZQ nm CORDER PARDER
      {:
        if (listE.size()>0){
            double varianza;
            varianza = Function.Varianza(listE);
            RESULT = varianza;
        }
      :}
      |MAX PARIZQ CORIZQ nm CORDER PARDER
      {:
         if (listE.size()>0){
            double max;
            max = Function.Max(listE);
            RESULT = max;
         }
      :}
      |MIN PARIZQ CORIZQ nm CORDER PARDER
      {:
       if (listE.size()>0){
            double min;
            min = Function.Min(listE);
            RESULT = min;
       }
      :}
;

nm ::=  nm COMA valorn
    |valorn
;

valorn ::=o:n {:RESULT = listE.add(n);:}
;

o ::= SUM PARIZQ o:v1 COMA o:v2  PARDER  {:RESULT = v1 + v2;:}
    |RESTA PARIZQ o:v1  COMA o:v2 PARDER  {:RESULT = v1 - v2;:}
    |MULTI PARIZQ o:v1 COMA o:v2 PARDER {:RESULT = v1 * v2;:}
    |DIV PARIZQ o:v1 COMA o:v2 PARDER {:RESULT = v1 / v2;:}
    |MOD PARIZQ o:v1 COMA o:v2 PARDER {:RESULT = v1 % v2;:}
    |NUM:n {:RESULT = Double.valueOf(n);:}
;

type_arr ::= CHAR DPD IDARR:id {:System.out.println(id);listS.clear();:} FLIZQ avp:list END PYC
            {:
                System.out.println(list);
                NodoSym arrS = new NodoSym(id,list,"Arreglo_char");
                TS.add(arrS);
            :}
            |DOUBLE DPD IDARR:id {:System.out.println(id);listD.clear();:} FLIZQ avn:list END PYC
            {:
                System.out.println(list);
                NodoSym arrD = new NodoSym(id,list,"Arreglo_double");
                TS.add(arrD);
            :}
;

avp ::= CORIZQ pals CORDER
        {:
            ArrayList<Object> listSClone = new ArrayList<>();
            listSClone = (ArrayList)listS.clone();
            RESULT = listSClone;
        :}
        |IDARR:id
        {:
            Object val = null;
            String type = "Arreglo_char";
            for(NodoSym sym:TS){
                if(sym.getNombre().equals(id) && sym.getTipo().equals(type)){
                    val = sym.getValor();
                    break;
                }
            }
            if(val != null){
                RESULT = val;
            }else{
                RESULT = "dato no encontrado o tipo no valido";
            }
        :}
;

pals::= pals COMA valorChar
        | valorChar
;

valorChar ::= CADENA:ca {:listS.add(ca);:}
;

avn ::= CORIZQ nums CORDER
        {:
            ArrayList<Object> listDClone = new ArrayList<>();
            listDClone = (ArrayList)listD.clone();
            RESULT = listDClone;
        :}
        |IDARR:id
        {:
            Object val = null;
            String type = "Arreglo_double";
            for(NodoSym sym:TS){
                if(sym.getNombre().equals(id) && sym.getTipo().equals(type)){
                    val = sym.getValor();
                    break;
                }
            }
            if(val != null){
                RESULT = val;
            }else{
                RESULT = "dato no encontrado o tipo no valido";
            }
        :}
;

nums ::= nums COMA valorNum
        |valorNum
;

valorNum ::= o:n1 {:listD.add(n1);:}
;

